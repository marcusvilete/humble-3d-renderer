{"version":3,"sources":["webpack://3d-renderer/./src/Etc/mathFunctions.ts","webpack://3d-renderer/./src/main.ts","webpack://3d-renderer/./src/Rendering/vector.ts","webpack://3d-renderer/./src/Etc/webglUtils.ts","webpack://3d-renderer/./src/Rendering/matrix.ts","webpack://3d-renderer/./src/Rendering/transform.ts","webpack://3d-renderer/./src/Rendering/camera.ts","webpack://3d-renderer/./src/Animation/joint.ts","webpack://3d-renderer/./src/File/FileLoader.ts","webpack://3d-renderer/./src/Rendering/quaternion.ts","webpack://3d-renderer/./src/Animation/JointTransform.ts","webpack://3d-renderer/./src/Animation/animator.ts","webpack://3d-renderer/./src/animatedModel.ts","webpack://3d-renderer/./src/Animation/animatedModelRenderer.ts"],"names":["degToRad","d","Math","PI","lerp","a","b","step","renderer","x","y","z","magnitude","v","sqrt","normalize","len","Vector3","divide","add","subtract","multiply","scalar","console","error","dotProduct","vectorCrossProduct","interpolate","zero","forward","backward","up","down","left","right","this","Vector2","w","Vector4","loadFromScript","gl","shaderElem","shaderType","shader","createShader","shaderSource","text","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","r0c0","r0c1","r0c2","r0c3","r1c0","r1c1","r1c2","r1c3","r2c0","r2c1","r2c2","r2c3","r3c0","r3c1","r3c2","r3c3","elements","getElementAt","row","col","setElementAt","value","flatten","makeIdentity","Matrix4","makeScale","makeTranslation","makeXRotation","angleInRadians","sine","sin","cosine","cos","makeYRotation","makeZRotation","makePerspective","fovInRadians","aspectRatio","zNear","zFar","f","tan","rangeInv","makeLookAtMatrix","position","target","zAxis","xAxis","yAxis","makeViewMatrix","eye","forwardZ","rightX","upY","multiplyMatrix4ByVector4","m","multiplyMatrices4","multiplied","i","j","transpose","transposed","copy","copied","inverse","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","compose","translation","scale","quaternion","result","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","rotation","reset","rotate","angles","computeDirectionVectors","rotationZMatrix","rotationYMatrix","rotationXMatrix","rotationMatrix","rotateAround","axis","rotateAroundMatrix","toTargetTranslationMatrix","backInplaceMatrix","xRotationMatrix","yRotationMatrix","zRotationMatrix","translate","updateLocalMatrix","localMatrix","translationMatrix","XRotationMatrix","scaleMatrix","updateWorldMatrix","parentMatrix","worldMatrix","getWorldMatrix","lookAt","lookAtMatrix","fieldOfView","near","far","transform","Transform","Camera","getActiveCamera","setActiveCamera","computePerspectiveMatrix","perspectiveMatrix","getPerspectiveMatrix","activeCamera","camera","id","name","localBindMatrix","inverseBindMatrix","animatedMatrix","children","computeInverseBindMatrix","bindTransform","forEach","joint","loadGltf","url","positionData","normalData","texCoordData","indicesData","jointData","weightData","rootJoint","jointCount","loadJson","gltf","baseURL","URL","location","href","Promise","all","buffers","map","buffer","uri","loadArrayBuffer","binaryBuffers","meshes","mesh","primitives","primitive","positionAccessorIndex","attributes","normalAccessorIndex","texCoordAccessorIndex","jointAccessorIndex","weightAccessorIndex","indicesIndex","indices","positionAccessor","accessors","normalAccessor","texCoordAccessor","jointAccessor","weightAccessor","indicesAccessor","positionBufferView","bufferViews","bufferView","normalBufferView","texCoordBufferView","jointBufferView","weightBufferView","indicesBufferView","positionBuffer","normalBuffer","texCoordBuffer","jointBuffer","weightBuffer","indicesBuffer","Float32Array","byteOffset","byteLength","BYTES_PER_ELEMENT","Uint8Array","Uint16Array","log","skins","skin","actualJointNodes","joints","index","nodes","inverseMatricesAccessor","inverseBindMatrices","inverseMatricesBufferView","inverseBindMatricesData","Array","length","offset","Joint","child","find","push","loadText","fetch","json","loadImage","resolve","reject","img","Image","addEventListener","src","arrayBuffer","toMatrix4","xw","yw","zw","fromMatrix4","diagonal","w4","x4","y4","z4","Quaternion","q","getLocalMatrix","JointTransform","model","xDeg","transl","doAnimation","animation","currentTime","update","deltaTime","now","xrotation","animateJoints","parent","worldBindMatrix","increaseAnimationTime","lengthInSeconds","computeCurrentAnimationPose","getPreviousAndNextFrames","previousFrame","nextFrame","calculateProgression","interpolatePoses","applyPoseToJoints","currentPose","currentTransform","currentMatrix","allKeyFrames","keyframes","previous","next","timestamp","totalTime","key","pose","positions","normals","texCoords","weights","texture","test","ctx","getContext","createBuffer","indexCount","bufferData","WebGLRenderingContext","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","animator","Animator","boneTexture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","data","bufferType","bindBuffer","STATIC_DRAW","arr","flattenJointMatrices","set","texImage2D","RGBA","FLOAT","render","context","positionAttributeLocation","getAttribLocation","texCoordsAttributeLocation","normalsAttributeLocation","jointsAttributeLocation","weightsAttributeLocation","worldMatrixUniformLocation","getUniformLocation","viewMatrixUniformLocation","projectionMatrixUniformLocation","worldInverseTransposeMatrixLocation","reverseLightDirectionLocation","jointTextureLocation","jointCountLocation","loadTexture","UNSIGNED_BYTE","generateMipmap","loadTexture2","color","clear","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","projectionMatrix","viewMatrix","viewport","canvas","width","height","useProgram","enable","CULL_FACE","DEPTH_TEST","uniform1i","uniform1f","uniformMatrix4fv","worldInverse","reverseLightDirectionVector","uniform3fv","enableVertexAttribArray","vertexAttribPointer","activeTexture","TEXTURE0","TEXTURE1","drawElements","TRIANGLES","UNSIGNED_SHORT","firsPersonCamera","cameraObj","forwardVelocity","rightVelocity","maxXRotation","minXRotation","cameraSpeed","mouseSensibility","Move","direction","cam","speed","velocity","Rotate","rotationAmount","controls","previousFrameTime","models","gameLoop","requestAnimationFrame","window","onload","FileLoader","then","gltfModel","canvasElem","document","querySelector","vertexShaderElem","fragmentShaderElem","getExtension","webglUtils","VERTEX_SHADER","FRAGMENT_SHADER","AnimatedModelRenderer","aspect","clientWidth","clientHeight","yFov","setup","AnimatedModel","event","mouseMoved","movementY","movementX","requestPointerLock","pointerLockElement","removeEventListener","createEventHandlers"],"mappings":"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","file":"main.js","sourcesContent":["export function radToDeg(r: number): number {\r\n    return r * 180 / Math.PI;\r\n}\r\n\r\nexport function degToRad(d: number): number {\r\n    return d * Math.PI / 180;\r\n}\r\n\r\nexport function randomIntFromInterval(min: number, max: number) { // min and max included \r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function slerp() {\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param a 'from' parameter\r\n * @param b 'to' parameter\r\n * @param step  step between 0 ~ 1. 0 returns a, 1 returns b, 0.5 returns the midpoint between a and b\r\n */\r\nexport function lerp(a: number, b: number, step: number) {\r\n    let iStep = 1 - step;\r\n    return  (iStep * a) + (step * b);\r\n}","import { Vector3, Vector4 } from \"./Rendering/vector\"\r\nimport { Matrix4 } from \"./Rendering/matrix\"\r\nimport { webglUtils } from \"./Etc/webglUtils\"\r\nimport { Camera } from \"./Rendering/camera\";\r\nimport { FileLoader } from \"./File/FileLoader\";\r\nimport { degToRad } from \"./Etc/mathFunctions\";\r\nimport { AnimatedModel } from \"./animatedModel\";\r\nimport { AnimatedModelRenderer } from \"./Animation/animatedModelRenderer\";\r\nimport { Quaternion } from \"./Rendering/quaternion\";\r\nimport { Joint } from \"./Animation/joint\";\r\n\r\n// stuff related to camera and camera movement\r\nlet firsPersonCamera = {\r\n    cameraObj: null as Camera,\r\n    forwardVelocity: new Vector3(0, 0, 0),\r\n    rightVelocity: new Vector3(0, 0, 0),\r\n    maxXRotation: degToRad(89),\r\n    minXRotation: degToRad(-89),\r\n    cameraSpeed: 20,\r\n    mouseSensibility: 0.1,\r\n    Move(direction: Vector3) {\r\n        let cam = this.cameraObj as Camera;\r\n        let speed = this.cameraSpeed * deltaTime;\r\n        let forwardVelocity = Vector3.multiply(cam.transform.forward, -direction.z);\r\n        let rightVelocity = Vector3.multiply(cam.transform.right, direction.x);\r\n        let velocity = Vector3.multiply(Vector3.add(forwardVelocity, rightVelocity), speed);\r\n        cam.transform.translate(velocity);\r\n    },\r\n    Rotate(rotationAmount: Vector3) {\r\n        let cam = this.cameraObj as Camera;\r\n        let rotation = cam.transform.rotation;\r\n        let speed = this.mouseSensibility * deltaTime;\r\n        rotation.x -= speed * rotationAmount.x;\r\n        rotation.y -= speed * rotationAmount.y;\r\n        if (rotation.x > this.maxXRotation) rotation.x = this.maxXRotation;\r\n        else if (rotation.x < this.minXRotation) rotation.x = this.minXRotation;\r\n        cam.transform.rotation = rotation;\r\n        cam.transform.rotate(Vector3.zero);\r\n    }\r\n};\r\n\r\n// this is for keyboard event handling\r\n// when 'keydown' happens, we set to true\r\n// when 'keyup' happens, we set to false\r\n// in the gameloop we process input based on this flags.\r\nlet controls = {\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false\r\n}\r\n\r\n/**\r\n * Time since last frame, in seconds\r\n */\r\nlet deltaTime = 0;\r\nlet previousFrameTime = 0;\r\n\r\n//vars for counting frames\r\nlet frameCount = 0;\r\nlet timeForFPS = 0;\r\n\r\nlet renderer: AnimatedModelRenderer;\r\n//array of game objects\r\n//let rootGameObject = new GameObject();\r\n//let gameObjects = new Array<GameObject>();\r\nlet models = new Array<AnimatedModel>();\r\n\r\n\r\n//window.onload = test;\r\nfunction test() {\r\n\r\n    abstract class testModel {\r\n        renderer: testRenderer;\r\n        render(): void {\r\n            this.renderer.render(this);\r\n        }\r\n    }\r\n\r\n    interface testRenderer {\r\n        render(model: testModel): void;\r\n    }\r\n\r\n    class testStaticModel extends testModel {\r\n        staticStuff: string;\r\n    }\r\n\r\n    class testAnimatedModel extends testModel {\r\n        animatedStuff: string;\r\n    }\r\n\r\n    class testStaticRenderer implements testRenderer {\r\n        render(model: testStaticModel): void {\r\n            console.log(model.staticStuff);\r\n            console.log(\"rendered from static renderer\");\r\n        }\r\n    }\r\n\r\n    class testAnimatedRenderer implements testRenderer {\r\n        render(model: testAnimatedModel): void {\r\n            console.log(model.animatedStuff);\r\n            console.log(\"rendered from animated renderer\");\r\n        }\r\n    }\r\n\r\n    let t = new testStaticModel();\r\n    t.renderer = new testStaticRenderer();\r\n    t.staticStuff = \"static content\";\r\n\r\n    let t2 = new testAnimatedModel();\r\n    t2.renderer = new testAnimatedRenderer();\r\n    t2.animatedStuff = \"animated content\";\r\n\r\n    t.render();\r\n    t2.render();\r\n\r\n}\r\n\r\nwindow.onload = main;\r\nfunction main(): void {\r\n    FileLoader.loadGltf(\"./assets/whale.CYCLES.gltf\").then((gltfModel) => {\r\n        setup();\r\n        let texture = renderer.loadTexture2(new Vector4(0, 0, 255, 255));\r\n        //renderer.bufferData2();\r\n        let model = new AnimatedModel(\r\n            gltfModel.positionData,\r\n            gltfModel.normalData,\r\n            gltfModel.texCoordData,\r\n            gltfModel.indicesData,\r\n            gltfModel.jointData,\r\n            gltfModel.weightData,\r\n            texture,\r\n            gltfModel.rootJoint,\r\n            gltfModel.jointCount,\r\n            renderer\r\n        );\r\n        models.push(model);\r\n        createEventHandlers();\r\n        requestAnimationFrame(gameLoop);\r\n    });\r\n\r\n\r\n    // //first of all, load resources!\r\n    // loadResources().then(() => {\r\n    //     setup();\r\n    //     instantiateObjects();\r\n    //     renderer.bufferData(gameObjects); // This should be called everytime we add or remove meshes to the scene\r\n    //     createEventHandlers();\r\n    //     requestAnimationFrame(gameLoop);\r\n    // });\r\n\r\n}\r\n\r\nfunction setup(): void {\r\n    let canvasElem: HTMLCanvasElement = document.querySelector(\"#canvas\");\r\n    let vertexShaderElem: HTMLScriptElement = document.querySelector(\"#vertex-shader-3d-textured-skinned\");\r\n    let fragmentShaderElem: HTMLScriptElement = document.querySelector(\"#fragment-shader-3d-textured-skinned\");\r\n\r\n    //initialize canvas and webgl stuff\r\n    let gl = canvasElem.getContext(\"webgl\");\r\n    if (!gl) {\r\n        console.error(\"Something went wrong while creating webgl context\");\r\n        return;\r\n    }\r\n    gl.getExtension('OES_texture_float');\r\n\r\n    let vertexShader = webglUtils.loadFromScript(gl, vertexShaderElem, gl.VERTEX_SHADER);\r\n    let fragmentShader = webglUtils.loadFromScript(gl, fragmentShaderElem, gl.FRAGMENT_SHADER);\r\n    let program = webglUtils.createProgram(gl, vertexShader, fragmentShader);\r\n\r\n    renderer = new AnimatedModelRenderer(gl, program);\r\n\r\n    const aspect = canvasElem.clientWidth / canvasElem.clientHeight;\r\n    let yFov = degToRad(60); //To radians;\r\n    let zNear = 1;\r\n    let zFar = 2000;\r\n\r\n    firsPersonCamera.cameraObj = new Camera(\r\n        yFov,\r\n        aspect,\r\n        zNear,\r\n        zFar\r\n    );\r\n    firsPersonCamera.cameraObj.computePerspectiveMatrix();\r\n}\r\n\r\nasync function loadResources() {\r\n    //we load everything we need to start rendering here....\r\n    //let allstarImagePromise = FileLoader.loadImage(\"./assets/allstar.png\");\r\n    //let allstarMeshesPromise = FileLoader.loadOBJ(\"./assets/allstar.obj\");\r\n    //let promises: Promise<any>[] = [allstarImagePromise, allstarMeshesPromise];\r\n\r\n    //resume only when everything is ready....\r\n    //await Promise.all(promises).then((values) => {\r\n    //allstarImage = values[0];\r\n    //allstarMeshes = values[1];\r\n    //});\r\n}\r\n\r\nfunction gameLoop(now: number): void {\r\n    now *= 0.001;\r\n    deltaTime = now - previousFrameTime;\r\n    previousFrameTime = now;\r\n    //computeFramesPerSecond();\r\n    processInput();\r\n    update();\r\n    render();\r\n    requestAnimationFrame(gameLoop);\r\n}\r\n\r\nfunction processInput() {\r\n\r\n    let direction = new Vector3();\r\n    if (controls.up) direction = Vector3.add(direction, Vector3.forward);\r\n    if (controls.down) direction = Vector3.add(direction, Vector3.backward);\r\n    if (controls.right) direction = Vector3.add(direction, Vector3.right);\r\n    if (controls.left) direction = Vector3.add(direction, Vector3.left);\r\n\r\n    firsPersonCamera.Move(direction);\r\n}\r\n\r\n\r\nfunction update(): void {\r\n\r\n    models.forEach(model => {\r\n        model.update(deltaTime, previousFrameTime);\r\n        //model.transform.translate(new Vector3(1 * deltaTime, 0, 0));\r\n    });\r\n}\r\n\r\nfunction render(): void {\r\n    renderer.clear();\r\n    models.forEach(model => {\r\n        model.render(Camera.getActiveCamera());\r\n    });\r\n}\r\n\r\nfunction createEventHandlers(): void {\r\n    document.addEventListener(\"keydown\", function (event: KeyboardEvent) {\r\n        if (event.key === 'w') {\r\n            controls.up = true;\r\n        } else if (event.key === 's') {\r\n            controls.down = true;\r\n        } else if (event.key === 'a') {\r\n            controls.left = true;\r\n        } else if (event.key === 'd') {\r\n            controls.right = true;\r\n        } else if (event.key === 'Enter') {\r\n            //console.log(controls);\r\n        }\r\n    });\r\n    document.addEventListener(\"keyup\", function (event: KeyboardEvent) {\r\n        if (event.key === 'w') {\r\n            controls.up = false;\r\n        } else if (event.key === 's') {\r\n            controls.down = false;\r\n        } else if (event.key === 'a') {\r\n            controls.left = false;\r\n        } else if (event.key === 'd') {\r\n            controls.right = false;\r\n        } else if (event.key === 'Enter') {\r\n            //console.log(controls);\r\n        }\r\n    });\r\n\r\n    // pointer lock object forking for cross browser\r\n    let canvas = renderer.getContext().canvas as HTMLCanvasElement;\r\n\r\n    canvas.addEventListener(\"click\", function (this: HTMLCanvasElement, event: Event) {\r\n        this.requestPointerLock();\r\n    });\r\n\r\n    document.addEventListener('pointerlockchange', pointerLockChanged);\r\n\r\n    function pointerLockChanged(): void {\r\n        if (document.pointerLockElement === canvas) {\r\n            document.addEventListener(\"mousemove\", mouseMoved);\r\n        } else {\r\n            //console.log('The pointer lock status is now unlocked');\r\n            document.removeEventListener(\"mousemove\", mouseMoved);\r\n        }\r\n    }\r\n\r\n    function mouseMoved(event: MouseEvent) {\r\n        let rotation = new Vector3(\r\n            event.movementY,\r\n            event.movementX,\r\n            0\r\n        );\r\n        firsPersonCamera.Rotate(rotation);\r\n    }\r\n}\r\n\r\nfunction computeFramesPerSecond() {\r\n    frameCount++;\r\n    timeForFPS += deltaTime;\r\n    if (timeForFPS >= 1.0) {\r\n        console.log(frameCount);\r\n        timeForFPS -= 1.0;\r\n        frameCount = 0\r\n    }\r\n}\r\n\r\n","import { lerp } from \"../Etc/mathFunctions\";\r\n\r\n//TODO: add functions to do math in place?\r\nexport class Vector2 {\r\n    x: number;\r\n    y: number;\r\n    /**\r\n    * \r\n    * @param x If not supplied, defaults to 0\r\n    * @param y If not supplied, defaults to 0\r\n    */\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n    }\r\n    /**\r\n     * \r\n     * The magnitude of a vector can be thought of the hypotenuse \r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     *        \r\n     *           \r\n     *                 /| \r\n     *                / | \r\n     *               /  | \r\n     *          |v| /   | y \r\n     *             /    | \r\n     *            /_____|\r\n     *                x \r\n     * \r\n     * @param v The Vector\r\n     * @returns The length(magnitude) of the vector\r\n     */\r\n    static magnitude(v: Vector2): number {\r\n        return Math.sqrt((v.x * v.x) + (v.y * v.y));\r\n    }\r\n    /**\r\n     * Compute the unit vector for a given vector.\r\n     * \r\n     * @param v The vector\r\n     * @returns A new unit vector\r\n     */\r\n    static normalize(v: Vector2): Vector2 {\r\n        let len = Vector2.magnitude(v);\r\n        if (len > 0) {\r\n            return Vector2.divide(v, len);\r\n        } else {\r\n            return new Vector2(0, 0);\r\n        }\r\n    }\r\n    /**\r\n     * Simple vector addition. \r\n     * Just add each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a + b\r\n     */\r\n    static add(a: Vector2, b: Vector2): Vector2 {\r\n        return new Vector2(\r\n            a.x + b.x,\r\n            a.y + b.y);\r\n    }\r\n    /**\r\n    * Simple vector subtraction. \r\n    * Just subtract each component of both vectors together.\r\n    * \r\n    * @param a First vector\r\n    * @param b Second Vector\r\n    * @returns Result vector from a - b\r\n    */\r\n    static subtract(a: Vector2, b: Vector2): Vector2 {\r\n        return new Vector2(\r\n            a.x - b.x,\r\n            a.y - b.y);\r\n    }\r\n    /**\r\n     * Multiply each vector component by a scalar factor.\r\n     * Can be thought of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static multiply(v: Vector2, scalar: number): Vector2 {\r\n        return new Vector2(\r\n            v.x * scalar,\r\n            v.y * scalar);\r\n    }\r\n    /**\r\n     * Divide each vector component by a scalar factor.\r\n     * Can be thought of \"inverse\" of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The \"inverse\" scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static divide(v: Vector2, scalar: number): Vector2 {\r\n        if (scalar !== 0) {\r\n            return new Vector2(\r\n                v.x / scalar,\r\n                v.y / scalar);\r\n        } else {\r\n            console.error(\"Can't divide by zero, Vector2 was not divided!\")\r\n            return v;\r\n        }\r\n    }\r\n    /**\r\n     * Can be thought of as \"how aligned are two vectors\".\r\n     * \r\n     * Or like a projection(or the sadow) of a vector into another\r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     * \r\n     *               \r\n     *               \r\n     *              Y|     B\r\n     *               |     /|\r\n     *               |    / | \r\n     *               |   /  |\r\n     *               |  /   |\r\n     *               | /    |\r\n     *               |/     |\r\n     *               |------>A.B---------->A\r\n     *               |----------------------->\t\r\n     *                                        X\r\n     * \r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns The result of the dot product\r\n     */\r\n    static dotProduct(a: Vector2, b: Vector2): number {\r\n        return (a.x * b.x) + (a.y * b.y);\r\n    }\r\n}\r\n\r\n//TODO: add functions to do math in place?\r\nexport class Vector3 extends Vector2 {\r\n    z: number;\r\n    /**\r\n     * \r\n     * @param x If not supplied, defaults to 0\r\n     * @param y If not supplied, defaults to 0\r\n     * @param z If not supplied, defaults to 0\r\n     */\r\n    constructor(x?: number, y?: number, z?: number) {\r\n        super(x ?? 0, y ?? 0);\r\n        this.z = z ?? 0;\r\n    }\r\n    static zero: Vector3 = new Vector3(0, 0, 0);\r\n    static forward: Vector3 = new Vector3(0, 0, -1);\r\n    static backward: Vector3 = new Vector3(0, 0, 1);\r\n    static up: Vector3 = new Vector3(0, 1, 0);\r\n    static down: Vector3 = new Vector3(0, -1, 0);\r\n    static left: Vector3 = new Vector3(-1, 0, 0);\r\n    static right: Vector3 = new Vector3(1, 0, 0);\r\n\r\n    /**\r\n     *\r\n     * Short explanation: same as vector2 magnitude, but with 3 components:\r\n     * \r\n     * |v|² = x²+ y² + z²\r\n     * \r\n     * Long explanation:\r\n     * \r\n     *                          TOP-VIEW                         SIDE-VIEW\r\n     *                              /|                               /|   \r\n     *                             / |                              / |   \r\n     *                            /  |                             /  |   \r\n     *       \"projection\" of z   /   | z                      |v| /   | y \r\n     *                          /    |                           /    | \r\n     *                         /_____|                          /_____|\r\n     *                            x                         \"projection\" of z\r\n     *\r\n     *\r\n     *    (\"projection\" of z)²  = x² + z²\r\n     *\r\n     *      |v|² = (\"projection\" of z)² + y²\r\n     *      |v|² = x²+ y² + z²\r\n     * \r\n     * \r\n     * \r\n     * \r\n     * \r\n     * @param v The Vector\r\n     * @returns The length(magnitude) of the vector\r\n     */\r\n    static magnitude(v: Vector3): number {\r\n        return Math.sqrt((v.x * v.x) + (v.y * v.y) + (v.z * v.z));\r\n    }\r\n    /**\r\n     * Compute the unit vector for a given vector.\r\n     * \r\n     * @param v The vector\r\n     * @returns A new unit vector\r\n     */\r\n    static normalize(v: Vector3): Vector3 {\r\n        let len = Vector3.magnitude(v);\r\n        if (len > 0) {\r\n            return Vector3.divide(v, len);\r\n        } else {\r\n            return new Vector3(0, 0, 0);\r\n        }\r\n    }\r\n    /**\r\n     * Simple vector addition. \r\n     * Just add each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a + b\r\n     */\r\n    static add(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            a.x + b.x,\r\n            a.y + b.y,\r\n            a.z + b.z);\r\n    }\r\n    /**\r\n     * Simple vector subtraction. \r\n     * Just subtract each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a - b\r\n     */\r\n    static subtract(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            a.x - b.x,\r\n            a.y - b.y,\r\n            a.z - b.z);\r\n    }\r\n    /**\r\n     * Multiply each vector component by a scalar factor.\r\n     * Can be thought of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static multiply(v: Vector3, scalar: number): Vector3 {\r\n        return new Vector3(\r\n            v.x * scalar,\r\n            v.y * scalar,\r\n            v.z * scalar\r\n        );\r\n    }\r\n    /**\r\n     * Divide each vector component by a scalar factor.\r\n     * Can be thought of \"inverse\" of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The \"inverse\" scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static divide(v: Vector3, scalar: number): Vector3 {\r\n        if (scalar !== 0) {\r\n            return new Vector3(\r\n                v.x / scalar,\r\n                v.y / scalar,\r\n                v.z / scalar\r\n            );\r\n        } else {\r\n            console.error(\"Can't divide by zero, Vector3 was not divided!\");\r\n            return v;\r\n        }\r\n    }\r\n    /**\r\n     * Can be thought of as \"how aligned are two vectors\".\r\n     * \r\n     * Or like a projection(or the sadow) of a vector into another\r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     * \r\n     *               \r\n     *               \r\n     *              Y|     B\r\n     *               |     /|\r\n     *               |    / | \r\n     *               |   /  |\r\n     *               |  /   |\r\n     *               | /    |\r\n     *               |/     |\r\n     *               |------>A.B---------->A\r\n     *               |----------------------->\t\r\n     *                                        X\r\n     * \r\n     * PS.: compare 2D and 3D vector magnitude comments to clarify how the third component(z) affects the calculation\r\n     * \r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns The result of the dot product\r\n     */\r\n    static dotProduct(a: Vector3, b: Vector3): number {\r\n        return (a.x * b.x) + (a.y * b.y) + (a.z * b.z);\r\n    }\r\n    /**\r\n     * Computes the cross product between two vectors.\r\n     * The result of a cross product is a third vector which is orthogonal(90º) to A and B\r\n     * It can be thought of computing the normal vector to a plane described by A and B\r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns A new orthogonal vector to A and B\r\n     */\r\n    static vectorCrossProduct(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            (a.y * b.z) - (a.z * b.y),\r\n            (a.z * b.x) - (a.x * b.z),\r\n            (a.x * b.y) - (a.y * b.x)\r\n        );\r\n    }\r\n    static interpolate(a: Vector3, b: Vector3, step: number): Vector3 {\r\n        let x = lerp(a.x, b.x, step);\r\n        let y = lerp(a.y, b.y, step);\r\n        let z = lerp(a.z, b.z, step);\r\n\r\n        return new Vector3(x, y, z);\r\n    }\r\n}\r\n\r\nexport class Vector4 extends Vector3 {\r\n    w: number;\r\n    /**\r\n     * \r\n     * @param x If not supplied, defaults to 0\r\n     * @param y If not supplied, defaults to 0\r\n     * @param z If not supplied, defaults to 0\r\n     * @param w If not supplied, defaults to 1\r\n     */\r\n    constructor(x?: number, y?: number, z?: number, w?: number) {\r\n        super(x ?? 0, y ?? 0, z ?? 0);\r\n        this.w = w ?? 1;\r\n    }\r\n    static forward: Vector4 = new Vector4(0, 0, -1, 1);\r\n    static backward: Vector4 = new Vector4(0, 0, 1, 1);\r\n    static up: Vector4 = new Vector4(0, 1, 0, 1);\r\n    static down: Vector4 = new Vector4(0, -1, 0, 1);\r\n    static left: Vector4 = new Vector4(-1, 0, 0, 1);\r\n    static right: Vector4 = new Vector4(1, 0, 0, 1);\r\n}","export class webglUtils {\r\n\r\n    static loadFromScript(gl: WebGLRenderingContext, shaderElem: HTMLScriptElement, shaderType: GLenum): WebGLShader {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderElem.text);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.error(\"Something went wrong when compiling a vertex shader. More info:\", gl.getShaderInfoLog(shader));\r\n            return;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    static createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.error(\"Something went wrong when compiling a vertex shader. More info:\", gl.getShaderInfoLog(program));\r\n            gl.deleteProgram(program);\r\n            return null;\r\n        }\r\n        return program;\r\n    }\r\n}","import { Vector3, Vector4 } from \"./vector\"\r\n\r\n//remember webGL is right-handed\r\n/**\r\n * This is a 4 ROWS(horizontal) by 4 COLUMNS matrix\r\n * \r\n * | r0c0  r0c1  r0c2  r0c3 | // row 0\r\n * | r1c0  r1c1  r1c2  r1c3 | // row 1\r\n * | r2c0  r2c1  r2c2  r2c3 | // row 2\r\n * | r3c0  r3c1  r3c2  r3c3 | // row 3\r\n * \r\n * BUT, the way WEBGL expects matrix data is as a single array, and \"column major\".\r\n * \r\n * So our matrix will be something like:\r\n * | r0c0  r1c0  r2c0  r3c0 | // col 0\r\n * | r0c1  r1c1  r2c1  r3c1 | // col 1\r\n * | r0c2  r1c2  r2c2  r3c2 | // col 2\r\n * | r0c3  r1c3  r2c3  r3c3 | // col 3\r\n * \r\n * or, in a single array: \r\n * \r\n * [ r0c0,  r1c0,  r2c0,  r3c0, r0c1,  r1c1,  r2c1,  r3c1,  r0c2,  r1c2,  r2c2,  r3c2, r0c3  r1c3  r2c3  r3c3 ]\r\n */\r\nexport class Matrix4 {\r\n    elements: number[]\r\n\r\n    constructor(r0c0?: number, r0c1?: number, r0c2?: number, r0c3?: number,\r\n        r1c0?: number, r1c1?: number, r1c2?: number, r1c3?: number,\r\n        r2c0?: number, r2c1?: number, r2c2?: number, r2c3?: number,\r\n        r3c0?: number, r3c1?: number, r3c2?: number, r3c3?: number) {\r\n        this.elements = [\r\n            r0c0 ?? 0, r0c1 ?? 0, r0c2 ?? 0, r0c3 ?? 0, // thats actually a column, not a row, but i call it row!\r\n            r1c0 ?? 0, r1c1 ?? 0, r1c2 ?? 0, r1c3 ?? 0,\r\n            r2c0 ?? 0, r2c1 ?? 0, r2c2 ?? 0, r2c3 ?? 0,\r\n            r3c0 ?? 0, r3c1 ?? 0, r3c2 ?? 0, r3c3 ?? 0,\r\n        ];\r\n    }\r\n    /**\r\n     * Get elements from the matrix at a given position.\r\n     * @param row Rows are zero based!\r\n     * @param col Columns are zero based!\r\n     * @returns The value at that position\r\n     */\r\n    getElementAt(row: number, col: number): number {\r\n        return this.elements[(col * 4) + row];\r\n    }\r\n    /**\r\n     * Set the value at a given position in the matrix\r\n     * @param row Rows are zero based!\r\n     * @param col Columns are zero based!\r\n     * @param value The value to be set\r\n     */\r\n    setElementAt(row: number, col: number, value: number): void {\r\n        this.elements[(col * 4) + row] = value;\r\n    }\r\n    flatten(): number[] {\r\n        return this.elements;\r\n    }\r\n\r\n    /**\r\n     * Identity matrix is the equivalent of the number \"1\" in matrices.\r\n     * In the sense that if we multiply any matrix 'M'by an Identity matrix 'I', the result will be 'M'.\r\n     * \r\n     * M * I = M\r\n     * \r\n     * @returns The identity matrix\r\n     */\r\n    static makeIdentity(): Matrix4 {\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Make a scale matrix\r\n     * @param x scale in x\r\n     * @param y scale in y\r\n     * @param z scale in z\r\n     * @returns The scale matrix\r\n     */\r\n    static makeScale(x: number, y: number, z: number): Matrix4 {\r\n        return new Matrix4(\r\n            x, 0, 0, 0,\r\n            0, y, 0, 0,\r\n            0, 0, z, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a translation matrix\r\n     * @param x translation in x\r\n     * @param y translation in y\r\n     * @param z translation in z\r\n     * @returns The translation matrix\r\n     */\r\n    static makeTranslation(x: number, y: number, z: number): Matrix4 {\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            x, y, z, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in X axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeXRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, cosine, sine, 0,\r\n            0, -sine, cosine, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in Y axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeYRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            cosine, 0, -sine, 0,\r\n            0, 1, 0, 0,\r\n            sine, 0, cosine, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in Z axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeZRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            cosine, sine, 0, 0,\r\n            -sine, cosine, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a perspective matrix\r\n     * @param fovInRadians Field of view angle, in radians!\r\n     * @param aspectRatio width/height ratio\r\n     * @param zNear The near z coordinate\r\n     * @param zFar The far z coordinate\r\n     * @returns \r\n     */\r\n    static makePerspective(fovInRadians: number, aspectRatio: number, zNear: number, zFar: number): Matrix4 {\r\n        // let f = Math.tan(fovInRadians / 2);\r\n\r\n        // return new Matrix4(\r\n        //     1 / (aspectRatio * f), 0, 0, 0,\r\n        //     0, 1 / f, 0, 0,\r\n        //     0, 0, zFar / (zFar - zNear), -(zFar * zNear) / (zFar - zNear),\r\n        //     0, 0, 0, 1);\r\n        let f = Math.tan(Math.PI * 0.5 - 0.5 * fovInRadians);\r\n        let rangeInv = 1.0 / (zNear - zFar);\r\n\r\n        return new Matrix4(\r\n            f / aspectRatio, 0, 0, 0,\r\n            0, f, 0, 0,\r\n            0, 0, (zNear + zFar) * rangeInv, -1,\r\n            0, 0, (zNear * zFar * rangeInv * 2), 0);\r\n\r\n    }\r\n\r\n    static makeLookAtMatrix(position: Vector3, target: Vector3, up: Vector3): Matrix4 {\r\n        let zAxis = Vector3.normalize(Vector3.subtract(position, target));\r\n        let xAxis = Vector3.normalize(Vector3.vectorCrossProduct(up, zAxis));\r\n        var yAxis = Vector3.normalize(Vector3.vectorCrossProduct(zAxis, xAxis));\r\n\r\n        return new Matrix4(\r\n            xAxis.x, xAxis.y, xAxis.z, 0,\r\n            yAxis.x, yAxis.y, yAxis.z, 0,\r\n            zAxis.x, zAxis.y, zAxis.z, 0,\r\n            position.x, position.y, position.z, 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a view(camera) matrix\r\n     * @param eye The eye/camera position\r\n     * @param target The \"look at target\" (position + direction)\r\n     * @param up The UP vector\r\n     * @returns The view(camera) matrix\r\n     */\r\n    static makeViewMatrix(eye: Vector3, target: Vector3, up: Vector3): Matrix4 {\r\n        //TODO: maybe use look at matrix here\r\n        let forwardZ = Vector3.normalize(Vector3.subtract(eye, target));\r\n        let rightX = Vector3.normalize(Vector3.vectorCrossProduct(up, forwardZ));\r\n        let upY = Vector3.vectorCrossProduct(forwardZ, rightX);\r\n        //this matrix is result of multiplying a translate with rotation(inverse of) matrix:\r\n\r\n        // | 1  0  0  eyeX |     | x.x  y.x  z.x  0 |(Inverse)\r\n        // | 0  1  0  eyeY |  *  | x.y  y.y  z.y  0 |\r\n        // | 0  0  1  eyeZ |     | x.z  y.z  z.z  0 |\r\n        // | 0  0  0   1   |     |  0    0    0   1 |\r\n\r\n        //since it is an orthogonal matrix, to compute the inverse we just transpose:\r\n        // | 1  0  0  eyeX |     | x.x  x.y  x.z  0 |(Inverse)\r\n        // | 0  1  0  eyeY |  *  | y.x  y.y  y.z  0 |\r\n        // | 0  0  1  eyeZ |     | z.x  z.y  z.z  0 |\r\n        // | 0  0  0   1   |     |  0    0    0   1 |\r\n\r\n        // | x.x  x.y  x.z  -dot(x, eye) |\r\n        // | y.x  y.y  y.z  -dot(y, eye) |\r\n        // | z.x  y.z  z.z  -dot(z, eye) |\r\n        // |  0    0    0        1       |\r\n\r\n        // return new Matrix4(\r\n        //     rightX.x,     rightX.y,     rightX.z,   -Vector3.dotProduct(rightX, eye),\r\n        //     upY.x,           upY.y,        upY.z,      -Vector3.dotProduct(upY, eye),\r\n        //     forwardZ.x, forwardZ.y,   forwardZ.z, -Vector3.dotProduct(forwardZ, eye),\r\n        //     0,                   0,            0,                                  1\r\n        // );\r\n        return new Matrix4(\r\n            rightX.x, upY.x, forwardZ.x, 0,\r\n            rightX.y, upY.y, forwardZ.y, 0,\r\n            rightX.z, upY.z, forwardZ.z, 0,\r\n            -Vector3.dotProduct(rightX, eye), -Vector3.dotProduct(upY, eye), -Vector3.dotProduct(forwardZ, eye), 1\r\n        );\r\n\r\n\r\n    }\r\n    /**\r\n     * Multiply a Vector by a Matrix.\r\n     * Can be thought of as \"applying a transformation\" to a vector\r\n     * @param m The matrix\r\n     * @param v The vector\r\n     * @returns Transformed vector\r\n     */\r\n    static multiplyMatrix4ByVector4(m: Matrix4, v: Vector4): Vector4 {\r\n        return new Vector4(\r\n            // v.x * m.getElementAt(0, 0) + v.y * m.getElementAt(1, 0) + v.z * m.getElementAt(2, 0) + v.w * m.getElementAt(3, 0),\r\n            // v.x * m.getElementAt(0, 1) + v.y * m.getElementAt(1, 1) + v.z * m.getElementAt(2, 1) + v.w * m.getElementAt(3, 1),\r\n            // v.x * m.getElementAt(0, 2) + v.y * m.getElementAt(1, 2) + v.z * m.getElementAt(2, 2) + v.w * m.getElementAt(3, 2),\r\n            // v.x * m.getElementAt(0, 3) + v.y * m.getElementAt(1, 3) + v.z * m.getElementAt(2, 3) + v.w * m.getElementAt(3, 3),\r\n            v.x * m.getElementAt(0, 0) + v.y * m.getElementAt(0, 1) + v.z * m.getElementAt(0, 2) + v.w * m.getElementAt(0, 3),\r\n            v.x * m.getElementAt(1, 0) + v.y * m.getElementAt(1, 1) + v.z * m.getElementAt(1, 2) + v.w * m.getElementAt(1, 3),\r\n            v.x * m.getElementAt(2, 0) + v.y * m.getElementAt(2, 1) + v.z * m.getElementAt(2, 2) + v.w * m.getElementAt(2, 3),\r\n            v.x * m.getElementAt(3, 0) + v.y * m.getElementAt(3, 1) + v.z * m.getElementAt(3, 2) + v.w * m.getElementAt(3, 3),\r\n        );\r\n    }\r\n    /**\r\n     * Multiply two matrices.\r\n     * Can be thought of as \"accumulating matrices transformations\"\r\n     * @param a Some matrix\r\n     * @param b Some other matrix\r\n     * @returns Multiplied matrix\r\n     */\r\n    static multiplyMatrices4(a: Matrix4, b: Matrix4): Matrix4 {\r\n        let multiplied = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let value = (b.getElementAt(i, 0) * a.getElementAt(0, j)) +\r\n                    (b.getElementAt(i, 1) * a.getElementAt(1, j)) +\r\n                    (b.getElementAt(i, 2) * a.getElementAt(2, j)) +\r\n                    (b.getElementAt(i, 3) * a.getElementAt(3, j));\r\n                multiplied.setElementAt(i, j, value);\r\n            }\r\n        }\r\n        return multiplied;\r\n    }\r\n    /**\r\n     * Transpose a matrix. \r\n     * Rows become columns and vice versa\r\n     * @param m the matrix\r\n     * @returns transposed matrix\r\n     */\r\n    static transpose(m: Matrix4): Matrix4 {\r\n        let transposed = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                transposed.setElementAt(i, j, m.getElementAt(j, i));\r\n            }\r\n        }\r\n        return transposed;\r\n    }\r\n\r\n    static copy(m: Matrix4): Matrix4 {\r\n        let copied = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                copied.setElementAt(i, j, m.getElementAt(i, j));\r\n            }\r\n        }\r\n        return copied;\r\n    }\r\n\r\n    static inverse(m: Matrix4): Matrix4 {\r\n        //matrix inverse from https://webglfundamentals.org/\r\n        //this.elements[(col * 4) + row];\r\n        let m00 = m.getElementAt(0, 0);\r\n        let m01 = m.getElementAt(1, 0);\r\n        let m02 = m.getElementAt(2, 0);\r\n        let m03 = m.getElementAt(3, 0);\r\n        let m10 = m.getElementAt(0, 1);\r\n        let m11 = m.getElementAt(1, 1);\r\n        let m12 = m.getElementAt(2, 1);\r\n        let m13 = m.getElementAt(3, 1);\r\n        let m20 = m.getElementAt(0, 2);\r\n        let m21 = m.getElementAt(1, 2);\r\n        let m22 = m.getElementAt(2, 2);\r\n        let m23 = m.getElementAt(3, 2);\r\n        let m30 = m.getElementAt(0, 3);\r\n        let m31 = m.getElementAt(1, 3);\r\n        let m32 = m.getElementAt(2, 3);\r\n        let m33 = m.getElementAt(3, 3);\r\n\r\n        let tmp_0 = m22 * m33;\r\n        let tmp_1 = m32 * m23;\r\n        let tmp_2 = m12 * m33;\r\n        let tmp_3 = m32 * m13;\r\n        let tmp_4 = m12 * m23;\r\n        let tmp_5 = m22 * m13;\r\n        let tmp_6 = m02 * m33;\r\n        let tmp_7 = m32 * m03;\r\n        let tmp_8 = m02 * m23;\r\n        let tmp_9 = m22 * m03;\r\n        let tmp_10 = m02 * m13;\r\n        let tmp_11 = m12 * m03;\r\n        let tmp_12 = m20 * m31;\r\n        let tmp_13 = m30 * m21;\r\n        let tmp_14 = m10 * m31;\r\n        let tmp_15 = m30 * m11;\r\n        let tmp_16 = m10 * m21;\r\n        let tmp_17 = m20 * m11;\r\n        let tmp_18 = m00 * m31;\r\n        let tmp_19 = m30 * m01;\r\n        let tmp_20 = m00 * m21;\r\n        let tmp_21 = m20 * m01;\r\n        let tmp_22 = m00 * m11;\r\n        let tmp_23 = m10 * m01;\r\n\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n\r\n        return new Matrix4(\r\n            d * t0,\r\n            d * t1,\r\n            d * t2,\r\n            d * t3,\r\n            d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n                (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),\r\n            d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n                (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),\r\n            d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n                (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),\r\n            d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n                (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),\r\n            d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n                (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),\r\n            d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n                (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),\r\n            d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n                (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),\r\n            d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n                (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),\r\n            d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n                (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),\r\n            d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n                (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),\r\n            d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n                (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),\r\n            d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n                (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))\r\n        );\r\n    }\r\n    static compose(translation: Vector3, scale: Vector3, quaternion: Vector4): Matrix4 {\r\n        let result = Matrix4.makeIdentity();\r\n\r\n        const x2 = quaternion.x + quaternion.x;\r\n        const y2 = quaternion.y + quaternion.y;\r\n        const z2 = quaternion.z + quaternion.z;\r\n\r\n        const xx = quaternion.x * x2;\r\n        const xy = quaternion.x * y2;\r\n        const xz = quaternion.x * z2;\r\n\r\n        const yy = quaternion.y * y2;\r\n        const yz = quaternion.y * z2;\r\n        const zz = quaternion.z * z2;\r\n\r\n        const wx = quaternion.w * x2;\r\n        const wy = quaternion.w * y2;\r\n        const wz = quaternion.w * z2;\r\n\r\n        result.elements[0] = (1 - (yy + zz)) * scale.x;\r\n        result.elements[1] = (xy + wz) * scale.x;\r\n        result.elements[2] = (xz - wy) * scale.x;\r\n        result.elements[3] = 0;\r\n    \r\n        result.elements[4] = (xy - wz) * scale.y;\r\n        result.elements[5] = (1 - (xx + zz)) * scale.y;\r\n        result.elements[6] = (yz + wx) * scale.y;\r\n        result.elements[7] = 0;\r\n    \r\n        result.elements[8] = (xz + wy) * scale.z;\r\n        result.elements[9] = (yz - wx) * scale.z;\r\n        result.elements[10] = (1 - (xx + yy)) * scale.z;\r\n        result.elements[11] = 0;\r\n    \r\n        result.elements[12] = translation.x;\r\n        result.elements[13] = translation.y;\r\n        result.elements[14] = translation.z;\r\n        result.elements[15] = 1;\r\n        \r\n        return result;\r\n    }\r\n    \r\n}","import { Matrix4 } from \"./matrix\";\r\nimport { Vector3, Vector4 } from \"./vector\";\r\n\r\nexport class Transform {\r\n    position: Vector3;\r\n    rotation: Vector3;\r\n    scale: Vector3;\r\n    up: Vector3;\r\n    right: Vector3;\r\n    forward: Vector3;\r\n    private worldMatrix: Matrix4;\r\n    private localMatrix: Matrix4;\r\n    constructor(position?: Vector3, rotation?: Vector3, scale?: Vector3, up?: Vector3, right?: Vector3, forward?: Vector3) {\r\n        this.position = position ?? new Vector3();\r\n        this.rotation = rotation ?? new Vector3();\r\n        this.scale = scale ?? new Vector3(1, 1, 1);\r\n        this.up = up ?? Vector3.up;\r\n        this.right = right ?? Vector3.right;\r\n        this.forward = forward ?? Vector3.forward;\r\n    }\r\n    reset(): void {\r\n        this.position = new Vector3();\r\n        this.rotation = new Vector3();\r\n        this.scale = new Vector3(1, 1, 1);\r\n    }\r\n    rotate(angles: Vector3): void {\r\n        this.rotation = Vector3.add(this.rotation, angles);\r\n        //1. make rotation matrices\r\n        //2. multiply direction vectors by the matrix\r\n        this.computeDirectionVectors();\r\n    }\r\n    //TODO: make sure directions are computed only when needed, but always when needed\r\n    computeDirectionVectors(): void {\r\n        //1. make rotation matrices\r\n        let rotationZMatrix = Matrix4.makeZRotation(this.rotation.z);\r\n        let rotationYMatrix = Matrix4.makeYRotation(this.rotation.y);\r\n        let rotationXMatrix = Matrix4.makeXRotation(this.rotation.x);\r\n\r\n        let rotationMatrix = Matrix4.multiplyMatrices4(rotationYMatrix, rotationZMatrix);\r\n        rotationMatrix = Matrix4.multiplyMatrices4(rotationXMatrix, rotationMatrix);\r\n        //2. multiply direction vectors by the matrix\r\n        this.up = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.up) as Vector3;\r\n        this.forward = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.forward) as Vector3;\r\n        this.right = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.right) as Vector3;\r\n    }\r\n    rotateAround(angles: number, target: Vector3, axis: Vector3): void {\r\n        let rotateAroundMatrix = Matrix4.makeIdentity();\r\n\r\n        let toTargetTranslationMatrix = Matrix4.makeTranslation(-target.x, -target.y, -target.z);\r\n        let backInplaceMatrix = Matrix4.makeTranslation(target.x, target.y, target.z);\r\n\r\n        let xRotationMatrix = Matrix4.makeXRotation(axis.x * angles);\r\n        let yRotationMatrix = Matrix4.makeYRotation(axis.y * angles);\r\n        let zRotationMatrix = Matrix4.makeZRotation(axis.z * angles);\r\n\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(backInplaceMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(zRotationMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(yRotationMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(xRotationMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(toTargetTranslationMatrix, rotateAroundMatrix);\r\n\r\n        this.position = Matrix4.multiplyMatrix4ByVector4(rotateAroundMatrix, new Vector4(this.position.x, this.position.y, this.position.z)) as Vector3;\r\n\r\n        //this.computeDirectionVectors();\r\n    }\r\n    translate(translation: Vector3): void {\r\n        this.position = Vector3.add(this.position, translation);\r\n    }\r\n\r\n    updateLocalMatrix(): void {\r\n        this.localMatrix = Matrix4.makeIdentity();\r\n        let translationMatrix = Matrix4.makeTranslation(this.position.x, this.position.y, this.position.z);\r\n        let XRotationMatrix = Matrix4.makeXRotation(this.rotation.x);\r\n        let yRotationMatrix = Matrix4.makeYRotation(this.rotation.y);\r\n        let zRotationMatrix = Matrix4.makeZRotation(this.rotation.z);\r\n        let scaleMatrix = Matrix4.makeScale(this.scale.x, this.scale.y, this.scale.z);\r\n\r\n        this.localMatrix = Matrix4.multiplyMatrices4(translationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(XRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(yRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(zRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(scaleMatrix, this.localMatrix);\r\n    }\r\n\r\n    updateWorldMatrix(parentMatrix?: Matrix4): void {\r\n        if (parentMatrix)\r\n            this.worldMatrix = Matrix4.multiplyMatrices4(this.localMatrix, parentMatrix);\r\n        else\r\n            this.worldMatrix = Matrix4.copy(this.localMatrix);\r\n    }\r\n    getWorldMatrix(): Matrix4 {\r\n        return this.worldMatrix;\r\n    }\r\n    lookAt(target: Vector3, up: Vector3): void {\r\n        let lookAtMatrix = Matrix4.makeLookAtMatrix(this.position, target, Vector3.up);\r\n        this.rotation = Matrix4.multiplyMatrix4ByVector4(lookAtMatrix, new Vector4(this.rotation.x, this.rotation.y, this.rotation.z)) as Vector3;\r\n    }\r\n}\r\n","import { Matrix4 } from \"./matrix\";\r\nimport { Transform } from \"./transform\";\r\n\r\n//TODO: this camera class can only represent a perspective camera...\r\n//      make so we can represent other types(like ortho?) of cameras...\r\n//      maybe, create specialized types extending this 'base' camera?\r\nexport class Camera {\r\n    transform: Transform;\r\n    fieldOfView: number;\r\n    aspectRatio: number;\r\n    near: number;\r\n    far: number;\r\n    private perspectiveMatrix: Matrix4;\r\n    private static activeCamera: Camera = null;\r\n    constructor(fieldOfView: number, aspectRatio: number, near: number, far: number) {\r\n        this.fieldOfView = fieldOfView;\r\n        this.aspectRatio = aspectRatio;\r\n        this.near = near;\r\n        this.far = far;\r\n        this.transform = new Transform();\r\n\r\n        if (Camera.getActiveCamera() === null) {\r\n            Camera.setActiveCamera(this);\r\n        }\r\n    }\r\n    computePerspectiveMatrix(): void {\r\n        this.perspectiveMatrix = Matrix4.makePerspective(\r\n            this.fieldOfView,\r\n            this.aspectRatio,\r\n            this.near,\r\n            this.far\r\n        );\r\n    }\r\n    getPerspectiveMatrix(): Matrix4 {\r\n        return this.perspectiveMatrix;\r\n    }\r\n    static getActiveCamera(): Camera {\r\n        return Camera.activeCamera;\r\n    }\r\n    static setActiveCamera(camera: Camera): void {\r\n        Camera.activeCamera = camera;\r\n    }\r\n}\r\n\r\n","import { Matrix4 } from \"../Rendering/matrix\";\r\n\r\nexport class Joint {\r\n    id: number;\r\n    name: string;\r\n    children: Joint[];\r\n    localBindMatrix: Matrix4; //original transform of this joint relative to parent(\"bone-space\")\r\n    inverseBindMatrix: Matrix4; // inverse of transform of this joint relative to origin(\"model-space\"). This is so we move the joint to origin and then apply the new transformation\r\n    animatedMatrix: Matrix4; // this is the matrix that actually gets sent to shader, this is calculated by the animator\r\n    constructor(id: number, name: string, localBindMatrix: Matrix4, inverseBindMatrix: Matrix4) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.localBindMatrix = localBindMatrix;\r\n        this.inverseBindMatrix = inverseBindMatrix;\r\n        this.animatedMatrix = Matrix4.multiplyMatrices4(inverseBindMatrix, localBindMatrix);\r\n        \r\n        //this.animatedMatrix = localBindMatrix;\r\n        this.children = [];\r\n    }\r\n\r\n    /**\r\n     * Call this once by the root joint after all joints are created.\r\n     * @param parentMatrix When the joint is root, parent is the origin(or identity).\r\n     */\r\n    computeInverseBindMatrix(parentMatrix: Matrix4): void {\r\n        let bindTransform = Matrix4.multiplyMatrices4(this.localBindMatrix, parentMatrix);\r\n        this.inverseBindMatrix = Matrix4.inverse(bindTransform);\r\n\r\n        this.children.forEach(joint => {\r\n            joint.computeInverseBindMatrix(bindTransform);\r\n        });\r\n    }\r\n}","import { AnimatedModel } from \"../animatedModel\";\r\nimport { Joint } from \"../Animation/joint\";\r\nimport { Matrix4 } from \"../Rendering/matrix\";\r\nimport { Quaternion } from \"../Rendering/quaternion\";\r\nimport { Vector3, Vector4 } from \"../Rendering/vector\";\r\n\r\nexport class FileLoader {\r\n\r\n    static async loadGltf(url: string) {\r\n        //TODO: load bone hierarchy\r\n        let result: GLTFModel = {\r\n            positionData: null,\r\n            normalData: null,\r\n            texCoordData: null,\r\n            indicesData: null,\r\n            jointData: null,\r\n            weightData: null,\r\n            rootJoint: null,\r\n            jointCount: 0\r\n        };\r\n        //let positionData: Float32Array;\r\n        //let normalData: Float32Array;\r\n        //let texCoordData: Float32Array;\r\n        //let indicesData: Uint16Array;\r\n        //let jointData: Float32Array; // top 4 joints that affects the position\r\n        //let weightData: Float32Array; // respective weight of that joint above\r\n        let inverseBindMatricesData: Float32Array;\r\n\r\n        let gltf = await this.loadJson<GLTFFile>(url);\r\n\r\n        const baseURL = new URL(url, location.href);\r\n\r\n        let binaryBuffers = await Promise.all(gltf.buffers.map((buffer) => {\r\n            const url = new URL(buffer.uri, baseURL.href);\r\n            return this.loadArrayBuffer(url.href);\r\n        }));\r\n\r\n        //there is just one mesh so far...\r\n        gltf.meshes.forEach((mesh) => {\r\n            mesh.primitives.forEach((primitive) => {\r\n                //TODO: get rid of all this repetition\r\n                const positionAccessorIndex = primitive.attributes[\"POSITION\"];\r\n                const normalAccessorIndex = primitive.attributes[\"NORMAL\"];\r\n                const texCoordAccessorIndex = primitive.attributes[\"TEXCOORD_0\"];\r\n                const jointAccessorIndex = primitive.attributes[\"JOINTS_0\"];\r\n                const weightAccessorIndex = primitive.attributes[\"WEIGHTS_0\"];\r\n                const indicesIndex = primitive.indices; //uhh\r\n\r\n                const positionAccessor = gltf.accessors[positionAccessorIndex];\r\n                const normalAccessor = gltf.accessors[normalAccessorIndex];\r\n                const texCoordAccessor = gltf.accessors[texCoordAccessorIndex];\r\n                const jointAccessor = gltf.accessors[jointAccessorIndex];\r\n                const weightAccessor = gltf.accessors[weightAccessorIndex];\r\n                const indicesAccessor = gltf.accessors[indicesIndex];\r\n\r\n                const positionBufferView = gltf.bufferViews[positionAccessor.bufferView];\r\n                const normalBufferView = gltf.bufferViews[normalAccessor.bufferView];\r\n                const texCoordBufferView = gltf.bufferViews[texCoordAccessor.bufferView];\r\n                const jointBufferView = gltf.bufferViews[jointAccessor.bufferView];\r\n                const weightBufferView = gltf.bufferViews[weightAccessor.bufferView];\r\n                const indicesBufferView = gltf.bufferViews[indicesAccessor.bufferView];\r\n\r\n                const positionBuffer = binaryBuffers[positionBufferView.buffer]; //actual data, finally\r\n                const normalBuffer = binaryBuffers[normalBufferView.buffer]; //actual data, finally\r\n                const texCoordBuffer = binaryBuffers[texCoordBufferView.buffer]; //actual data, finally\r\n                const jointBuffer = binaryBuffers[jointBufferView.buffer]; //actual data, finally\r\n                const weightBuffer = binaryBuffers[weightBufferView.buffer]; //actual data, finally\r\n                const indicesBuffer = binaryBuffers[indicesBufferView.buffer]; //actual data, finally\r\n\r\n                result.positionData = new Float32Array(positionBuffer, positionBufferView.byteOffset, positionBufferView.byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n                result.normalData = new Float32Array(normalBuffer, normalBufferView.byteOffset, normalBufferView.byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n                result.texCoordData = new Float32Array(texCoordBuffer, texCoordBufferView.byteOffset, texCoordBufferView.byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n                result.jointData = new Uint8Array(jointBuffer, jointBufferView.byteOffset, jointBufferView.byteLength / Uint8Array.BYTES_PER_ELEMENT);\r\n                result.weightData = new Float32Array(weightBuffer, weightBufferView.byteOffset, weightBufferView.byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n                result.indicesData = new Uint16Array(indicesBuffer, indicesBufferView.byteOffset, indicesBufferView.byteLength / Uint16Array.BYTES_PER_ELEMENT);//11994);\r\n                console.log(\"position\", result.positionData);\r\n                console.log(\"normals\", result.normalData);\r\n                console.log(\"tex coords\", result.texCoordData);\r\n                console.log(\"joint ids\", result.jointData);\r\n                console.log(\"weights\" , result.weightData);\r\n                console.log(\"indices\", result.indicesData);\r\n            });\r\n        });\r\n\r\n        //now the skins...\r\n        //there is only one skin so far...\r\n        let joints: Joint[];\r\n        gltf.skins.forEach((skin) => {\r\n            let actualJointNodes = skin.joints.map(index => gltf.nodes[index]);\r\n            const inverseMatricesAccessor = gltf.accessors[skin.inverseBindMatrices];\r\n            const inverseMatricesBufferView = gltf.bufferViews[inverseMatricesAccessor.bufferView];\r\n            const buffer = binaryBuffers[inverseMatricesBufferView.buffer];\r\n            inverseBindMatricesData = new Float32Array(buffer, inverseMatricesBufferView.byteOffset, inverseMatricesBufferView.byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n            let inverseBindMatrices = new Array<Matrix4>(inverseBindMatricesData.length / 16);\r\n\r\n            for (let i = 0; i < inverseBindMatrices.length; i++) {\r\n                let offset = (16 * i);\r\n                inverseBindMatrices[i] = new Matrix4(\r\n                    inverseBindMatricesData[0 + offset], inverseBindMatricesData[1 + offset], inverseBindMatricesData[2 + offset], inverseBindMatricesData[3 + offset],\r\n                    inverseBindMatricesData[4 + offset], inverseBindMatricesData[5 + offset], inverseBindMatricesData[6 + offset], inverseBindMatricesData[7 + offset],\r\n                    inverseBindMatricesData[8 + offset], inverseBindMatricesData[9 + offset], inverseBindMatricesData[10 + offset], inverseBindMatricesData[11 + offset],\r\n                    inverseBindMatricesData[12 + offset], inverseBindMatricesData[13 + offset], inverseBindMatricesData[14 + offset], inverseBindMatricesData[15 + offset]\r\n                );\r\n            }\r\n\r\n            console.log(\"FileLoader: \", inverseBindMatricesData);\r\n\r\n            //console.log(\"inverse bind matrices: \", inverseBindMatrices);\r\n\r\n            joints = new Array<Joint>(actualJointNodes.length);\r\n\r\n            //fill a Joint array\r\n            \r\n            for (let i = 0; i < actualJointNodes.length; i++) {\r\n                // let localMatrix = Matrix4.makeIdentity();\r\n                // let translation = actualJointNodes[i].translation;\r\n                // let rotation = actualJointNodes[i].rotation;\r\n                // let scale = actualJointNodes[i].scale;\r\n\r\n                // if (translation) {\r\n                //     let translationMatrix = Matrix4.makeTranslation(translation[0], translation[1], translation[2]);\r\n                //     localMatrix = Matrix4.multiplyMatrices4(translationMatrix, localMatrix);\r\n                // }\r\n\r\n                // if (rotation) {\r\n                //     let quaternion = new Quaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\r\n                //     let rotationMatrix = quaternion.toMatrix4();\r\n                //     localMatrix = Matrix4.multiplyMatrices4(rotationMatrix, localMatrix);\r\n                // }\r\n\r\n                // if (scale) {\r\n                //     let scaleMatrix = Matrix4.makeTranslation(scale[0], scale[1], scale[2]);\r\n                //     localMatrix = Matrix4.multiplyMatrices4(scaleMatrix, localMatrix);\r\n                // }\r\n\r\n                let localMatrix = Matrix4.makeIdentity();\r\n                let translation = new Vector3(0, 0, 0);\r\n                let rotation = new Vector4(0, 0, 0, 1);\r\n                let scale = new Vector3(1, 1, 1);\r\n\r\n                if (actualJointNodes[i].translation) {\r\n                    translation.x = actualJointNodes[i].translation[0];\r\n                    translation.y = actualJointNodes[i].translation[1];\r\n                    translation.z = actualJointNodes[i].translation[2];\r\n                }\r\n\r\n                if (actualJointNodes[i].rotation) {\r\n                    rotation.x = actualJointNodes[i].rotation[0];\r\n                    rotation.y = actualJointNodes[i].rotation[1];\r\n                    rotation.z = actualJointNodes[i].rotation[2];\r\n                    rotation.w = actualJointNodes[i].rotation[3];\r\n                }\r\n\r\n                if (actualJointNodes[i].scale) {\r\n                    scale.x = actualJointNodes[i].scale[0];\r\n                    scale.y = actualJointNodes[i].scale[1];\r\n                    scale.z = actualJointNodes[i].scale[2];\r\n                }\r\n\r\n                localMatrix = Matrix4.compose(translation, scale, rotation);\r\n\r\n                joints[i] = new Joint(\r\n                    i,\r\n                    actualJointNodes[i].name,\r\n                    localMatrix,\r\n                    inverseBindMatrices[i]\r\n                );\r\n            }\r\n            //get tree-like hierarchy done\r\n            for (let i = 0; i < actualJointNodes.length; i++) {\r\n                if (actualJointNodes[i].children) {\r\n                    actualJointNodes[i].children.forEach(child => {\r\n                        let j = joints.find(x => x.name === gltf.nodes[child].name);\r\n                        joints[i].children.push(j);\r\n                    });\r\n                }\r\n            }\r\n            \r\n            //joints[0] // root->001->002->005->003->004\r\n            //joints[1] // 001\r\n            //joints[2] // 002\r\n            //joints[3] // 005\r\n            //joints[4] // 003\r\n            //joints[5] // 004\r\n\r\n\r\n\r\n            // joints[0].children = [joints[1], joints[4], joints[5]];\r\n            // joints[1].children = [joints[2]];\r\n            // joints[2].children = [joints[3]]\r\n\r\n            // joints[0].children = [joints[1], joints[4], joints[5]];\r\n            // joints[1].children = [joints[3]];\r\n            // joints[3].children = [joints[2]];\r\n\r\n            //root to bone 4\r\n            //bone 1 to bone 3\r\n\r\n            //joints[5].children = [joints[4], joints[1], joints[0]];\r\n            //joints[4].children = [joints[3]];\r\n            //joints[3].children = [joints[2]];\r\n            \r\n            //is this right?\r\n            result.rootJoint = joints[0];\r\n            result.jointCount = joints.length;\r\n\r\n            //console.log(rootJoint);\r\n\r\n            // joints.forEach(j => {\r\n            //     console.log(Matrix4.multiplyMatrices4(j.inverseBindMatrix, j.localBindMatrix));\r\n            // });\r\n\r\n\r\n            //console.log(inverseBindMatricesData);\r\n        });\r\n\r\n\r\n\r\n        return result;\r\n\r\n        //return [positionData, normalData, texCoordData, jointData, weightData, indicesData];\r\n\r\n        //return GltfParser.parse(binaryBuffers);\r\n    }\r\n\r\n    static async loadText(url: string) {\r\n        let response = await fetch(url);\r\n        return response.text();\r\n    }\r\n\r\n    static async loadJson<T>(url: string) {\r\n        let response = await fetch(url);\r\n        return response.json() as Promise<T>;\r\n    }\r\n\r\n    static async loadImage(url: string): Promise<HTMLImageElement> {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.addEventListener('load', () => {\r\n                resolve(img);\r\n            });\r\n            img.src = url;\r\n        });\r\n    }\r\n\r\n    static async loadArrayBuffer(url: string) {\r\n        const response = await fetch(url);\r\n        return response.arrayBuffer();\r\n    }\r\n}\r\n\r\n\r\n//gltf types on demand\r\ninterface GLTFBuffer {\r\n    byteLength: number;\r\n    uri: string\r\n}\r\n\r\ninterface GLTFBufferView {\r\n    buffer: number;\r\n    byteLength: number;\r\n    byteOffset: number;\r\n}\r\n\r\ninterface GLTFAccessor {\r\n    bufferView: number;\r\n    componentType: number;\r\n    count: number;\r\n    max: number[];\r\n    min: number[];\r\n    type: string;\r\n}\r\n\r\ninterface GLTFMesh {\r\n    name: string;\r\n    primitives: GLTFPrimitive[]\r\n}\r\n\r\ninterface GLTFPrimitive {\r\n    attributes: GLTFAttributes;\r\n    indices: 5;\r\n    material: number;\r\n}\r\n\r\ninterface GLTFAttributes {\r\n    [key: string]: number;\r\n}\r\n\r\ninterface GLTFNode {\r\n    name: string;\r\n    rotation: number[]; //4-component quaternion\r\n    translation: number[]; //3-component vector\r\n    scale: number[];//3-component vector\r\n    skin: number; //skin index\r\n    mesh: number; //mesh index\r\n    children: number[]; // index of children nodes\r\n}\r\n\r\ninterface GLTFSkin {\r\n    inverseBindMatrices: number; //this is the accessor index?\r\n    joints: number[]; //ids for node array\r\n    name: string;\r\n}\r\n\r\ninterface GLTFFile {\r\n    nodes: GLTFNode[];\r\n    skins: GLTFSkin[];\r\n    meshes: GLTFMesh[];\r\n    buffers: GLTFBuffer[];\r\n    accessors: GLTFAccessor[];\r\n    bufferViews: GLTFBufferView[];\r\n}\r\n\r\ninterface GLTFModel {\r\n    positionData: Float32Array,\r\n    normalData: Float32Array,\r\n    texCoordData: Float32Array,\r\n    indicesData: Uint16Array,\r\n    jointData: Uint8Array,\r\n    weightData: Float32Array,\r\n    rootJoint: Joint,\r\n    jointCount: number\r\n}","import { lerp } from \"../Etc/mathFunctions\";\r\nimport { Matrix4 } from \"./matrix\";\r\nimport { Vector3, Vector4 } from \"./vector\";\r\n\r\n//Quaternions are a way to represent rotation\r\n//for future reference: \r\n// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/\r\n// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n// https://www.youtube.com/watch?v=d4EgbgTm0Bg\r\nexport class Quaternion {\r\n    //TODO: im scared of Quaternions!\r\n    // i might come back here later(maybe rework the rotation part at transform?), but for now we can:\r\n    // - create a quaternion from a matrix\r\n    // - create a rotation matrix from a quaternion\r\n    // - interpolate between quaternions(since it is easier to interpolate rotations this way!)\r\n    \r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    w: number;\r\n    constructor(x: number, y: number, z: number, w: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n        this.normalize();\r\n    }\r\n    normalize(): void {\r\n        //vector-like normalization...\r\n        //find the \"vector\" magnitude, then divide by magnitude\r\n        const magnitude = Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z) + (this.w * this.w));\r\n\r\n        if (magnitude > 0) {\r\n            this.x /= magnitude;\r\n            this.y /= magnitude;\r\n            this.z /= magnitude;\r\n            this.w /= magnitude;\r\n        }\r\n    }\r\n    /**\r\n     * Convert from quaternion to a rotation matrix\r\n     * @returns \r\n     */\r\n    toMatrix4(): Matrix4 {\r\n        let m = Matrix4.makeIdentity();\r\n        const xx = this.x * this.x;\r\n        const xy = this.x * this.y;\r\n        const xz = this.x * this.z;\r\n        const xw = this.x * this.w;\r\n\r\n        const yy = this.y * this.y;\r\n        const yz = this.y * this.z;\r\n        const yw = this.y * this.w;\r\n\r\n        const zz = this.z * this.z;\r\n        const zw = this.z * this.w;\r\n\r\n        m = new Matrix4(\r\n            (1 - 2 * (yy + zz)), (2 * (xy - zw)), (2 * (xz + yw)), 0,\r\n            (2 * (xy + zw)), (1 - 2 * (xx + zz)), (2 * (yz - xw)), 0,\r\n            (2 * (xz - yw)), (2 * (yz + xw)), (1 - 2 * (xx + yy)), 0,\r\n            0, 0, 0, 1,\r\n        );\r\n\r\n        return m;\r\n    };\r\n\r\n\r\n    /**\r\n     * Extracts rotation components from a matrix 4x4\r\n     * @param m \r\n     * @returns \r\n     */\r\n    static fromMatrix4(m: Matrix4): Quaternion {\r\n        let x: number;\r\n        let y: number;\r\n        let z: number;\r\n        let w: number;\r\n\r\n        const diagonal = m.getElementAt(0, 0) + m.getElementAt(1, 1) + m.getElementAt(2, 2);\r\n        if (diagonal > 0) {\r\n            let w4 = (Math.sqrt(diagonal + 1) * 2);\r\n            x = (m.getElementAt(2, 1) - m.getElementAt(1, 2)) / w4;\r\n            y = (m.getElementAt(0, 2) - m.getElementAt(2, 0)) / w4;\r\n            z = (m.getElementAt(1, 0) - m.getElementAt(0, 1)) / w4;\r\n            w = w4 / 4;\r\n        } else if ((m.getElementAt(0, 0) > m.getElementAt(1, 1)) && (m.getElementAt(0, 0) > m.getElementAt(2, 2))) {\r\n            const x4 = (Math.sqrt(1 + m.getElementAt(0, 0) - m.getElementAt(1, 1) - m.getElementAt(2, 2)) * 2);\r\n            x = x4 / 4;\r\n            y = (m.getElementAt(0, 1) + m.getElementAt(1, 0)) / x4;\r\n            z = (m.getElementAt(0, 2) + m.getElementAt(2, 0)) / x4;\r\n            w = (m.getElementAt(2, 1) - m.getElementAt(1, 2)) / x4;\r\n        } else if (m.getElementAt(1, 1) > m.getElementAt(2, 2)) {\r\n            const y4 = (Math.sqrt(1 + m.getElementAt(1, 1) - m.getElementAt(0, 0) - m.getElementAt(2, 2)) * 2);\r\n            x = (m.getElementAt(0, 1) + m.getElementAt(1, 0)) / y4;\r\n            y = y4 / 4;\r\n            z = (m.getElementAt(1, 2) + m.getElementAt(2, 1)) / y4;\r\n            w = (m.getElementAt(0, 2) - m.getElementAt(2, 0)) / y4;\r\n        } else {\r\n            const z4 = (Math.sqrt(1 + m.getElementAt(2, 2) - m.getElementAt(0, 0) - m.getElementAt(1, 1)) * 2);\r\n            x = (m.getElementAt(0, 2) + m.getElementAt(2, 0)) / z4;\r\n            y = (m.getElementAt(1, 2) + m.getElementAt(2, 1)) / z4;\r\n            z = z4 / 4;\r\n            w = (m.getElementAt(1, 0) - m.getElementAt(0, 1)) / z4;\r\n        }\r\n        return new Quaternion(x, y, z, w);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param a 'from' parameter\r\n     * @param b 'to' parameter\r\n     * @param step step between 0 ~ 1. 0 returns a, 1 returns b, 0.5 returns the midpoint between a and b\r\n     * @returns \r\n     */\r\n    static interpolate(a: Quaternion, b: Quaternion, step: number): Quaternion {\r\n        let q = new Quaternion(0, 0, 0, 1);\r\n        //vector-like dot product\r\n        const dotProduct = (a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w);\r\n\r\n        if (dotProduct < 0) {\r\n            q.x = lerp(a.x, -b.x, step);\r\n            q.y = lerp(a.x, -b.y, step);\r\n            q.z = lerp(a.x, -b.z, step);\r\n            q.w = lerp(a.x, -b.w, step);\r\n        } else {\r\n            q.x = lerp(a.x, b.x, step);\r\n            q.y = lerp(a.x, b.y, step);\r\n            q.z = lerp(a.x, b.z, step);\r\n            q.w = lerp(a.x, b.w, step);\r\n        }\r\n        q.normalize();\r\n        return q;\r\n    }\r\n\r\n}","import { Matrix4 } from \"../Rendering/matrix\";\r\nimport { Quaternion } from \"../Rendering/quaternion\";\r\nimport { Vector3 } from \"../Rendering/vector\";\r\n\r\n\r\n//A list of JointTransform, represent the \"pose\" of the model\r\n//A JointTransform holds position and rotation relative to the parent joint(or the origin if it is the root)\r\nexport class JointTransform {\r\n    position: Vector3;\r\n    rotation: Quaternion;\r\n    constructor(position: Vector3, rotation: Quaternion) {\r\n        this.position = position;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    getLocalMatrix(): Matrix4 {\r\n        let localMatrix = Matrix4.makeIdentity();\r\n        let translationMatrix = Matrix4.makeTranslation(this.position.x, this.position.y, this.position.z);\r\n        let rotationMatrix = this.rotation.toMatrix4();\r\n\r\n        localMatrix = Matrix4.multiplyMatrices4(translationMatrix, localMatrix);\r\n        localMatrix = Matrix4.multiplyMatrices4(rotationMatrix, localMatrix);\r\n\r\n        return localMatrix;\r\n    }\r\n\r\n    static interpolate(a: JointTransform, b: JointTransform, step: number): JointTransform {\r\n        return new JointTransform(\r\n            Vector3.interpolate(a.position, b.position, step),\r\n            Quaternion.interpolate(a.rotation, b.rotation, step)\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import { Matrix4 } from \"../Rendering/matrix\";\r\nimport { AnimatedModel } from \"../animatedModel\";\r\nimport { HumbleAnimation } from \"./animation\";\r\nimport { Joint } from \"./joint\";\r\nimport { JointTransform } from \"./JointTransform\";\r\nimport { HumbleKeyframe, Pose } from \"./keyframe\";\r\nimport { degToRad } from \"../Etc/mathFunctions\";\r\n\r\nexport class Animator {\r\n    animation: HumbleAnimation;\r\n    currentTime: number;\r\n    model: AnimatedModel;\r\n    constructor(model: AnimatedModel) {\r\n        this.model = model;\r\n    }\r\n\r\n    //set, or reset an animation\r\n    doAnimation(animation: HumbleAnimation): void {\r\n        this.currentTime = 0;\r\n        this.animation = animation;\r\n    }\r\n\r\n    xDeg = 0;\r\n    transl = 0;\r\n    update(deltaTime: number, now: number): void {\r\n        this.xDeg += degToRad(30) * deltaTime;\r\n        this.transl += 1 * deltaTime;\r\n        //let xrotation = Matrix4.makeXRotation(this.xDeg);\r\n        let xrotation = Matrix4.makeXRotation(Math.sin(now) * .5);\r\n        //let xrotation = Matrix4.makeXRotation(degToRad(-90) * .5);\r\n        let xtransl = Matrix4.makeTranslation(0, this.transl, 0);\r\n        let inverseWorld = Matrix4.inverse(this.model.transform.getWorldMatrix());\r\n\r\n\r\n\r\n\r\n        animateJoints(this.model.rootJoint, this.model.transform.getWorldMatrix());\r\n        function animateJoints(joint: Joint, parent: Matrix4) {\r\n            \r\n            let worldBindMatrix = Matrix4.multiplyMatrices4(joint.localBindMatrix, parent);\r\n            worldBindMatrix = Matrix4.multiplyMatrices4(xrotation, worldBindMatrix);\r\n\r\n            joint.animatedMatrix = Matrix4.makeIdentity();\r\n            joint.animatedMatrix = Matrix4.multiplyMatrices4(worldBindMatrix, joint.animatedMatrix);\r\n            joint.animatedMatrix = Matrix4.multiplyMatrices4(joint.inverseBindMatrix, joint.animatedMatrix);\r\n            \r\n\r\n            if (joint.children) {\r\n                joint.children.forEach(child => {\r\n                    animateJoints(child, worldBindMatrix);\r\n                });\r\n            }\r\n        }\r\n\r\n        //this.model.rootJoint.animatedMatrix = Matrix4.multiplyMatrices4(xrotation, this.model.rootJoint.animatedMatrix);\r\n        //this.model.rootJoint.children[0].animatedMatrix = Matrix4.multiplyMatrices4(xrotation, this.model.rootJoint.children[0].animatedMatrix);\r\n        //this.model.rootJoint.children[1].animatedMatrix = Matrix4.multiplyMatrices4(xrotation, this.model.rootJoint.children[1].animatedMatrix);\r\n        //this.model.rootJoint.children[2].animatedMatrix = Matrix4.multiplyMatrices4(xrotation, this.model.rootJoint.children[2].animatedMatrix); \r\n        //this.model.rootJoint.children[0].children[0].animatedMatrix = Matrix4.multiplyMatrices4(xrotation, this.model.rootJoint.children[0].children[0].animatedMatrix);\r\n        //this.model.rootJoint.children[0].children[0].children[0].animatedMatrix = Matrix4.multiplyMatrices4(xrotation, this.model.rootJoint.children[0].children[0].children[0].animatedMatrix);\r\n        //let c = this.model.rootJoint.children[0].children[0].children[0];\r\n        //c.animatedMatrix = Matrix4.multiplyMatrices4(xtransl, c.animatedMatrix);\r\n\r\n\r\n\r\n        // if (this.animation) {\r\n        //     this.increaseAnimationTime(deltaTime);\r\n        //     let currentPose = this.computeCurrentAnimationPose();\r\n        //     this.applyPoseToJoints(currentPose, this.model.rootJoint, Matrix4.makeIdentity());\r\n        // }\r\n    }\r\n\r\n    //increase time and, loop around when it ends\r\n    increaseAnimationTime(deltaTime: number): void {\r\n        this.currentTime += deltaTime;\r\n        if (this.currentTime > this.animation.lengthInSeconds) {\r\n            this.currentTime %= this.animation.lengthInSeconds;\r\n        }\r\n    }\r\n\r\n    computeCurrentAnimationPose(): Pose {\r\n        let [previousFrame, nextFrame] = this.getPreviousAndNextFrames();\r\n        let step = this.calculateProgression(previousFrame, nextFrame);\r\n        return this.interpolatePoses(previousFrame, nextFrame, step);\r\n    }\r\n\r\n    applyPoseToJoints(currentPose: Pose, joint: Joint, parentMatrix: Matrix4): void {\r\n        let currentTransform = currentPose[joint.name];\r\n        let currentMatrix = Matrix4.multiplyMatrices4(currentTransform.getLocalMatrix(), parentMatrix);\r\n\r\n        joint.children.forEach(child => {\r\n            this.applyPoseToJoints(currentPose, child, currentMatrix);\r\n        });\r\n\r\n        joint.animatedMatrix = Matrix4.multiplyMatrices4(joint.inverseBindMatrix, currentMatrix);\r\n    }\r\n\r\n    getPreviousAndNextFrames(): [HumbleKeyframe, HumbleKeyframe] {\r\n        let allKeyFrames = this.animation.keyframes;\r\n        let previous = allKeyFrames[0];\r\n        let next = allKeyFrames[0];\r\n\r\n        for (let i = 1; i < allKeyFrames.length; i++) {\r\n            next = allKeyFrames[i];\r\n            if (next.timestamp > this.currentTime) {\r\n                break;\r\n            }\r\n            previous = allKeyFrames[i];\r\n        }\r\n\r\n        return [previous, next];\r\n    }\r\n\r\n    calculateProgression(previousFrame: HumbleKeyframe, nextFrame: HumbleKeyframe) {\r\n        let totalTime = nextFrame.timestamp - previousFrame.timestamp;\r\n        let currentTime = this.currentTime - previousFrame.timestamp\r\n\r\n        return currentTime / totalTime;\r\n    }\r\n\r\n    interpolatePoses(previousFrame: HumbleKeyframe, nextFrame: HumbleKeyframe, step: number) {\r\n        let currentPose: Pose;\r\n        //foreach joint transform, interpolate between previous and next keyframe, then return a new interpolated \"Pose\"\r\n        for (const key in previousFrame.pose) {\r\n            currentPose[key] = JointTransform.interpolate(previousFrame.pose[key], previousFrame.pose[key], step);\r\n        }\r\n        return currentPose;\r\n    }\r\n}\r\n\r\n","import { AnimatedModelRenderer } from \"./Animation/animatedModelRenderer\";\r\nimport { HumbleAnimation } from \"./Animation/animation\";\r\nimport { Animator } from \"./Animation/animator\";\r\nimport { Joint } from \"./Animation/joint\";\r\nimport { degToRad } from \"./Etc/mathFunctions\";\r\nimport { Camera } from \"./Rendering/camera\";\r\nimport { Matrix4 } from \"./Rendering/matrix\";\r\nimport { Transform } from \"./Rendering/transform\";\r\nimport { Vector3 } from \"./Rendering/vector\";\r\n\r\nexport class AnimatedModel {\r\n    //mesh data\r\n    //TODO: maybe turn all those arrays into a \"mesh struct\"?\r\n    positions: WebGLBuffer;\r\n    normals: WebGLBuffer;\r\n    texCoords: WebGLBuffer;\r\n    indices: WebGLBuffer; // attributes are going to be indexed(draw elements)\r\n    indexCount: number;\r\n    //skin data\r\n    joints: WebGLBuffer; // joints that affects the vertices\r\n    weights: WebGLBuffer;\r\n\r\n    texture: WebGLTexture;\r\n    boneTexture: WebGLTexture; //passing bone matrices as \"data texture\" to work around uniform limits in WEBGL\r\n\r\n    rootJoint: Joint;\r\n    jointCount: number;\r\n\r\n    animator: Animator;\r\n    renderer: AnimatedModelRenderer;\r\n    transform: Transform;\r\n    test = false;\r\n\r\n    constructor(\r\n        positions: Float32Array, normals: Float32Array, texCoords: Float32Array,\r\n        indices: Uint16Array, joints: Uint8Array, weights: Float32Array, texture: WebGLTexture,\r\n        rootJoint: Joint, jointCount: number, renderer: AnimatedModelRenderer) {\r\n        this.renderer = renderer;\r\n        let ctx = this.renderer.getContext();\r\n        this.positions = ctx.createBuffer();\r\n        this.normals = ctx.createBuffer();\r\n        this.texCoords = ctx.createBuffer();\r\n        this.indices = ctx.createBuffer();\r\n        this.joints = ctx.createBuffer();\r\n        this.weights = ctx.createBuffer();\r\n        this.indexCount = indices.length;\r\n\r\n        this.bufferData(this.indices, indices, WebGLRenderingContext.ELEMENT_ARRAY_BUFFER);\r\n        this.bufferData(this.positions, positions, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.normals, normals, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.texCoords, texCoords, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.joints, joints, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.weights, weights, WebGLRenderingContext.ARRAY_BUFFER);\r\n\r\n        this.texture = texture ?? null;\r\n        this.rootJoint = rootJoint ?? null;\r\n        this.jointCount = jointCount ?? 0;\r\n        //this.rootJoint.computeInverseBindMatrix(Matrix4.makeIdentity());\r\n        this.animator = new Animator(this);\r\n\r\n        this.transform = new Transform(\r\n            new Vector3(0, 0, 0),\r\n            new Vector3(degToRad(-45), 0, 0),\r\n            new Vector3(1, 1, 1)\r\n        );\r\n\r\n        this.boneTexture = ctx.createTexture();\r\n        ctx.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.boneTexture);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);\r\n    }\r\n\r\n    private bufferData(buffer: WebGLBuffer, data: BufferSource, bufferType: number) {\r\n        let ctx = this.renderer.getContext();\r\n        ctx.bindBuffer(bufferType, buffer);\r\n        ctx.bufferData(bufferType, data, WebGLRenderingContext.STATIC_DRAW);\r\n    }\r\n\r\n    //set, or reset an animation\r\n    doAnimation(animation: HumbleAnimation) {\r\n        this.animator.doAnimation(animation);\r\n    }\r\n\r\n    update(deltaTime: number, now: number) {\r\n        let ctx = this.renderer.getContext();\r\n        this.transform.updateLocalMatrix();\r\n        this.transform.updateWorldMatrix();\r\n\r\n        this.animator.update(deltaTime, now);\r\n        let arr = new Float32Array(this.jointCount * 16);\r\n        flattenJointMatrices(this.rootJoint);\r\n\r\n        ctx.bindTexture(ctx.TEXTURE_2D, this.boneTexture);\r\n\r\n        if (!this.test) {\r\n            this.test = true;\r\n            console.log(\"animatedModel: \", arr);\r\n        }\r\n        ctx.texImage2D(\r\n            ctx.TEXTURE_2D, 0, ctx.RGBA, 4,\r\n            this.jointCount, 0, ctx.RGBA, ctx.FLOAT, arr\r\n        );\r\n\r\n\r\n        function flattenJointMatrices(joint: Joint) {\r\n            let offset = joint.id * 16;\r\n\r\n            //let x = Matrix4.inverse(joint.localBindMatrix);\r\n\r\n            //joint.animatedMatrix = Matrix4.multiplyMatrices4(x, joint.localBindMatrix);\r\n            //joint.animatedMatrix = Matrix4.multiplyMatrices4(joint.animatedMatrix, joint.inverseBindMatrix);\r\n\r\n            //joint.animatedMatrix = Matrix4.multiplyMatrices4(joint.inverseBindMatrix, joint.localBindMatrix);\r\n\r\n\r\n            arr.set(joint.animatedMatrix.flatten(), offset);\r\n            if (joint.children) {\r\n                joint.children.forEach(child => {\r\n                    flattenJointMatrices(child);\r\n                });\r\n            }\r\n        }\r\n        //console.log(\"Translation: \", this.rootJoint.animatedMatrix.elements[12], this.rootJoint.animatedMatrix.elements[13], this.rootJoint.animatedMatrix.elements[14]);\r\n\r\n    }\r\n    render(camera: Camera) {\r\n        this.renderer.render(camera, this);\r\n    }\r\n}","import { AnimatedModel } from \"../animatedModel\";\r\nimport { Camera } from \"../Rendering/camera\";\r\nimport { Matrix4 } from \"../Rendering/matrix\";\r\nimport { Vector3, Vector4 } from \"../Rendering/vector\";\r\n\r\nexport class AnimatedModelRenderer {\r\n    private program: WebGLProgram;\r\n    private context: WebGLRenderingContext;\r\n\r\n    private positionAttributeLocation: number;\r\n    private texCoordsAttributeLocation: number;\r\n    private normalsAttributeLocation: number;\r\n    private jointsAttributeLocation: number;\r\n    private weightsAttributeLocation: number;\r\n\r\n    private worldMatrixUniformLocation: WebGLUniformLocation;\r\n    private viewMatrixUniformLocation: WebGLUniformLocation;\r\n    private projectionMatrixUniformLocation: WebGLUniformLocation;\r\n    private worldInverseTransposeMatrixLocation: WebGLUniformLocation;\r\n    private reverseLightDirectionLocation: WebGLUniformLocation;\r\n    private jointTextureLocation: WebGLUniformLocation; // data as texture\r\n    private jointCountLocation: WebGLUniformLocation;\r\n\r\n\r\n    constructor(context: WebGLRenderingContext, program: WebGLProgram) {\r\n        this.context = context;\r\n        this.program = program;\r\n\r\n        //context.pixelStorei(context.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this.positionAttributeLocation = context.getAttribLocation(program, \"a_position\");\r\n        this.texCoordsAttributeLocation = context.getAttribLocation(program, \"a_texcoord\");\r\n        this.normalsAttributeLocation = context.getAttribLocation(program, \"a_normal\");\r\n        this.jointsAttributeLocation = context.getAttribLocation(program, \"a_joints\");\r\n        this.weightsAttributeLocation = context.getAttribLocation(program, \"a_weights\");\r\n\r\n        this.worldMatrixUniformLocation = context.getUniformLocation(program, \"u_worldMatrix\");\r\n        this.viewMatrixUniformLocation = context.getUniformLocation(program, \"u_viewMatrix\");\r\n        this.projectionMatrixUniformLocation = context.getUniformLocation(program, \"u_projectionMatrix\");\r\n        this.worldInverseTransposeMatrixLocation = context.getUniformLocation(program, \"u_worldInverseTransposeMatrix\");\r\n        this.reverseLightDirectionLocation = context.getUniformLocation(program, \"u_reverseLightDirection\");\r\n\r\n        this.jointTextureLocation = context.getUniformLocation(program, \"u_jointTexture\");\r\n        this.jointCountLocation = context.getUniformLocation(program, \"u_numJoints\");\r\n    }\r\n    getContext(): WebGLRenderingContext {\r\n        return this.context;\r\n    }\r\n    loadTexture(img: HTMLImageElement): WebGLTexture {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, this.context.RGBA, this.context.UNSIGNED_BYTE, img);\r\n        this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n    loadTexture2(color: Vector4) {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, 1, 1, 0, this.context.RGBA, this.context.UNSIGNED_BYTE,\r\n            new Uint8Array([0, 0, 255, 255]));\r\n        //this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n    clear() {\r\n        this.context.clearColor(0.5, 0.5, 0.5, 1);\r\n        this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\r\n    }\r\n    render(camera: Camera, model: AnimatedModel): void {\r\n        let projectionMatrix = camera.getPerspectiveMatrix();\r\n        let viewMatrix = Matrix4.makeViewMatrix(\r\n            camera.transform.position,\r\n            Vector3.add(camera.transform.position, camera.transform.forward),\r\n            Vector3.up);\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        this.context.viewport(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        this.context.useProgram(this.program);\r\n        this.context.enable(this.context.CULL_FACE);\r\n        this.context.enable(this.context.DEPTH_TEST);\r\n\r\n        //set uniforms\r\n        this.context.uniform1i(this.jointTextureLocation, 1);  // texture unit 1\r\n        this.context.uniform1f(this.jointCountLocation, model.jointCount);  // texture unit 1\r\n        this.context.uniformMatrix4fv(this.worldMatrixUniformLocation, false, model.transform.getWorldMatrix().flatten());\r\n        this.context.uniformMatrix4fv(this.projectionMatrixUniformLocation, false, projectionMatrix.flatten());\r\n        this.context.uniformMatrix4fv(this.viewMatrixUniformLocation, false, viewMatrix.flatten());\r\n        \r\n        this.context.uniform1f(this.jointCountLocation, model.jointCount);\r\n        let worldInverse = Matrix4.inverse(model.transform.getWorldMatrix());\r\n        this.context.uniformMatrix4fv(this.worldInverseTransposeMatrixLocation, false, Matrix4.transpose(worldInverse).flatten());\r\n        let reverseLightDirectionVector = Vector3.normalize(new Vector3(0.5, 0.7, 1));\r\n        this.context.uniform3fv(\r\n            this.reverseLightDirectionLocation,\r\n            new Float32Array([\r\n                reverseLightDirectionVector.x,\r\n                reverseLightDirectionVector.y,\r\n                reverseLightDirectionVector.z])\r\n        );\r\n\r\n        //bind buffers\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.positions);\r\n        this.context.enableVertexAttribArray(this.positionAttributeLocation);\r\n        //Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        this.context.vertexAttribPointer(\r\n            this.positionAttributeLocation,\r\n            3,          // we are passing 3 components per iteration\r\n            this.context.FLOAT,   // the type of each component\r\n            false,      // should normalize?\r\n            0,          // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0           // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.texCoords);\r\n        this.context.enableVertexAttribArray(this.texCoordsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.texCoordsAttributeLocation,\r\n            2,         // we are passing 2 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.normals);\r\n        this.context.enableVertexAttribArray(this.normalsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.normalsAttributeLocation,\r\n            3,         // we are passing 3 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.joints);\r\n        this.context.enableVertexAttribArray(this.jointsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.jointsAttributeLocation,\r\n            4,         // we are passing 4 components per iteration\r\n            this.context.UNSIGNED_BYTE,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.weights);\r\n        this.context.enableVertexAttribArray(this.weightsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.weightsAttributeLocation,\r\n            4,         // we are passing 4 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n\r\n\r\n        this.context.activeTexture(this.context.TEXTURE0);\r\n        this.context.bindTexture(this.context.TEXTURE_2D, model.texture);\r\n        this.context.activeTexture(this.context.TEXTURE1);\r\n        this.context.bindTexture(this.context.TEXTURE_2D, model.boneTexture);\r\n\r\n\r\n        this.context.drawElements(\r\n            WebGLRenderingContext.TRIANGLES,\r\n            model.indexCount,\r\n            this.context.UNSIGNED_SHORT,\r\n            0\r\n        );\r\n\r\n    }\r\n}\r\n"],"sourceRoot":""}