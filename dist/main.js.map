{"version":3,"sources":["webpack://3d-renderer/./src/Rendering/mesh.ts","webpack://3d-renderer/./src/Rendering/vector.ts","webpack://3d-renderer/./src/Rendering/matrix.ts","webpack://3d-renderer/./src/Etc/webglUtils.ts","webpack://3d-renderer/./src/Rendering/transform.ts","webpack://3d-renderer/./src/Rendering/gameobject.ts","webpack://3d-renderer/./src/Rendering/camera.ts","webpack://3d-renderer/./src/Rendering/renderer.ts","webpack://3d-renderer/./src/File/ObjFile.ts","webpack://3d-renderer/./src/File/FileLoader.ts","webpack://3d-renderer/./src/Etc/mathFunctions.ts","webpack://3d-renderer/./src/main.ts"],"names":["DrawMode","x","y","this","magnitude","v","Math","sqrt","normalize","len","Vector2","divide","add","a","b","subtract","multiply","scalar","dotProduct","z","Vector3","vectorCrossProduct","zero","forward","backward","up","down","left","right","w","Vector4","r0c0","r0c1","r0c2","r0c3","r1c0","r1c1","r1c2","r1c3","r2c0","r2c1","r2c2","r2c3","r3c0","r3c1","r3c2","r3c3","elements","getElementAt","row","col","setElementAt","value","flatten","makeIdentity","Matrix4","makeScale","makeTranslation","makeXRotation","angleInRadians","sine","sin","cosine","cos","makeYRotation","makeZRotation","makePerspective","fovInRadians","aspectRatio","zNear","zFar","f","tan","PI","rangeInv","makeLookAtMatrix","position","target","zAxis","xAxis","yAxis","makeViewMatrix","eye","forwardZ","rightX","upY","multiplyMatrix4ByVector4","m","multiplyMatrices4","multiplied","i","j","transpose","transposed","copy","copied","inverse","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","d","vertices","normals","uvCoords","drawMode","Texture","WebGLRenderingContext","POINTS","LINE_STRIP","TRIANGLES","loadFromScript","gl","shaderElem","shaderType","shader","createShader","shaderSource","text","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","createProgram","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","rotation","scale","reset","rotate","angles","computeDirectionVectors","rotationZMatrix","rotationYMatrix","rotationXMatrix","rotationMatrix","rotateAround","axis","rotateAroundMatrix","toTargetTranslationMatrix","backInplaceMatrix","xRotationMatrix","yRotationMatrix","zRotationMatrix","translate","translation","computeWorldViewMatrices","viewProjectionMatrix","worldViewMatrix","worldMatrix","updateLocalMatrix","localMatrix","translationMatrix","XRotationMatrix","scaleMatrix","updateWorldMatrix","parentMatrix","getWorldViewMatrix","getWorldMatrix","lookAt","lookAtMatrix","transform","mesh","Transform","children","updateLocalMatrices","forEach","child","updateWorldMatrices","setParent","parent","ndx","indexOf","splice","push","fieldOfView","near","far","Camera","getActiveCamera","setActiveCamera","computePerspectiveMatrix","perspectiveMatrix","getPerspectiveMatrix","activeCamera","camera","context","vertexBuffer","createBuffer","normalBuffer","texCoordsBuffer","pixelStorei","UNPACK_FLIP_Y_WEBGL","positionAttributeLocation","getAttribLocation","texCoordsAttributeLocation","normalsAttributeLocation","worldViewMatrixUniformLocation","getUniformLocation","worldInverseTransposeMatrixLocation","reverseLightDirectionLocation","getContext","loadTexture","img","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","bufferData","gameObjects","vertexArr","normalArr","texCoordArr","arrLen","arrIndex","gameObj","length","Float32Array","bufferOffset","vertex","normal","texCoord","bindBuffer","ARRAY_BUFFER","STATIC_DRAW","render","viewport","canvas","width","height","useProgram","enable","CULL_FACE","DEPTH_TEST","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","uniformMatrix4fv","worldInverse","reverseLightDirectionVector","uniform3fv","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","drawArrays","parse","meshes","currentMesh","Mesh","data","allPositions","allTexCoords","allNormals","allData","keywords","parts","numbers","map","parseFloat","vn","vt","numTriangles","tri","addVertex","usemtl","o","keywordRE","lines","split","lineNo","line","trim","startsWith","exec","keyword","slice","handler","vert","objIndexStr","objIndex","parseInt","index","loadOBJ","url","loadText","ObjParser","fetch","loadJson","json","loadImage","Promise","resolve","reject","Image","addEventListener","src","degToRad","renderer","allstarImage","allstarMeshes","firsPersonCamera","cameraObj","forwardVelocity","rightVelocity","maxXRotation","minXRotation","cameraSpeed","mouseSensibility","Move","direction","cam","speed","deltaTime","velocity","Rotate","rotationAmount","controls","previousFrameTime","rootGameObject","GameObject","Array","gameLoop","now","projectionMatrix","viewMatrix","update","requestAnimationFrame","window","onload","allstarImagePromise","FileLoader","allstarMeshesPromise","promises","all","then","values","loadResources","allstarTexture","canvasElem","document","querySelector","vertexShaderElem","fragmentShaderElem","webglUtils","VERTEX_SHADER","FRAGMENT_SHADER","Renderer","aspect","clientWidth","clientHeight","yFov","setup","newObj","event","key","mouseMoved","movementY","movementX","requestPointerLock","pointerLockElement","removeEventListener","createEventHandlers"],"mappings":"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","file":"main.js","sourcesContent":["import { Vector2, Vector3 } from \"./vector\"\r\n\r\nexport class Mesh {\r\n    vertices: Vector3[];\r\n    normals: Vector3[];\r\n    uvCoords: Vector2[]; //lets say x is u and y is v, ok?\r\n    scale: Vector3;\r\n    translation: Vector3;\r\n    rotation: Vector3;\r\n    drawMode: DrawMode;\r\n    bufferOffset: number;\r\n    texture: WebGLTexture;\r\n    constructor() {\r\n        this.vertices = [];\r\n        this.normals = [];\r\n        this.uvCoords = [];\r\n        this.drawMode = DrawMode.Texture;\r\n    };\r\n}\r\n\r\nexport class Face {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n\r\n    constructor(a: number, b: number, c: number) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    };\r\n}\r\n\r\nexport enum DrawMode {\r\n    Point = WebGLRenderingContext.POINTS,\r\n    Wireframe = WebGLRenderingContext.LINE_STRIP,\r\n    SolidColor = WebGLRenderingContext.TRIANGLES,\r\n    Texture = WebGLRenderingContext.TRIANGLES\r\n}\r\n","//TODO: add functions to do math in place?\r\nexport class Vector2 {\r\n    x: number;\r\n    y: number;\r\n    /**\r\n    * \r\n    * @param x If not supplied, defaults to 0\r\n    * @param y If not supplied, defaults to 0\r\n    */\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n    }\r\n    /**\r\n     * \r\n     * The magnitude of a vector can be thought of the hypotenuse \r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     *        \r\n     *           \r\n     *                 /| \r\n     *                / | \r\n     *               /  | \r\n     *          |v| /   | y \r\n     *             /    | \r\n     *            /_____|\r\n     *                x \r\n     * \r\n     * @param v The Vector\r\n     * @returns The length(magnitude) of the vector\r\n     */\r\n    static magnitude(v: Vector2): number {\r\n        return Math.sqrt((v.x * v.x) + (v.y * v.y));\r\n    }\r\n    /**\r\n     * Compute the unit vector for a given vector.\r\n     * \r\n     * @param v The vector\r\n     * @returns A new unit vector\r\n     */\r\n    static normalize(v: Vector2): Vector2 {\r\n        let len = Vector2.magnitude(v);\r\n        if (len > 0) {\r\n            return Vector2.divide(v, len);\r\n        } else {\r\n            return new Vector2(0, 0);\r\n        }\r\n    }\r\n    /**\r\n     * Simple vector addition. \r\n     * Just add each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a + b\r\n     */\r\n    static add(a: Vector2, b: Vector2): Vector2 {\r\n        return new Vector2(\r\n            a.x + b.x,\r\n            a.y + b.y);\r\n    }\r\n    /**\r\n    * Simple vector subtraction. \r\n    * Just subtract each component of both vectors together.\r\n    * \r\n    * @param a First vector\r\n    * @param b Second Vector\r\n    * @returns Result vector from a - b\r\n    */\r\n    static subtract(a: Vector2, b: Vector2): Vector2 {\r\n        return new Vector2(\r\n            a.x - b.x,\r\n            a.y - b.y);\r\n    }\r\n    /**\r\n     * Multiply each vector component by a scalar factor.\r\n     * Can be thought of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static multiply(v: Vector2, scalar: number): Vector2 {\r\n        return new Vector2(\r\n            v.x * scalar,\r\n            v.y * scalar);\r\n    }\r\n    /**\r\n     * Divide each vector component by a scalar factor.\r\n     * Can be thought of \"inverse\" of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The \"inverse\" scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static divide(v: Vector2, scalar: number): Vector2 {\r\n        return new Vector2(\r\n            v.x / scalar,\r\n            v.y / scalar);\r\n    }\r\n    /**\r\n     * Can be thought of as \"how aligned are two vectors\".\r\n     * \r\n     * Or like a projection(or the sadow) of a vector into another\r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     * \r\n     *               \r\n     *               \r\n     *              Y|     B\r\n     *               |     /|\r\n     *               |    / | \r\n     *               |   /  |\r\n     *               |  /   |\r\n     *               | /    |\r\n     *               |/     |\r\n     *               |------>A.B---------->A\r\n     *               |----------------------->\t\r\n     *                                        X\r\n     * \r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns The result of the dot product\r\n     */\r\n    static dotProduct(a: Vector2, b: Vector2): number {\r\n        return (a.x * b.x) + (a.y * b.y);\r\n    }\r\n}\r\n\r\n//TODO: add functions to do math in place?\r\nexport class Vector3 extends Vector2 {\r\n    z: number;\r\n    /**\r\n     * \r\n     * @param x If not supplied, defaults to 0\r\n     * @param y If not supplied, defaults to 0\r\n     * @param z If not supplied, defaults to 0\r\n     */\r\n    constructor(x?: number, y?: number, z?: number) {\r\n        super(x ?? 0, y ?? 0);\r\n        this.z = z ?? 0;\r\n    }\r\n    static zero: Vector3 = new Vector3(0, 0, 0);\r\n    static forward: Vector3 = new Vector3(0, 0, -1);\r\n    static backward: Vector3 = new Vector3(0, 0, 1);\r\n    static up: Vector3 = new Vector3(0, 1, 0);\r\n    static down: Vector3 = new Vector3(0, -1, 0);\r\n    static left: Vector3 = new Vector3(-1, 0, 0);\r\n    static right: Vector3 = new Vector3(1, 0, 0);\r\n\r\n    /**\r\n     *\r\n     * Short explanation: same as vector2 magnitude, but with 3 components:\r\n     * \r\n     * |v|² = x²+ y² + z²\r\n     * \r\n     * Long explanation:\r\n     * \r\n     *                          TOP-VIEW                         SIDE-VIEW\r\n     *                              /|                               /|   \r\n     *                             / |                              / |   \r\n     *                            /  |                             /  |   \r\n     *       \"projection\" of z   /   | z                      |v| /   | y \r\n     *                          /    |                           /    | \r\n     *                         /_____|                          /_____|\r\n     *                            x                         \"projection\" of z\r\n     *\r\n     *\r\n     *    (\"projection\" of z)²  = x² + z²\r\n     *\r\n     *      |v|² = (\"projection\" of z)² + y²\r\n     *      |v|² = x²+ y² + z²\r\n     * \r\n     * \r\n     * \r\n     * \r\n     * \r\n     * @param v The Vector\r\n     * @returns The length(magnitude) of the vector\r\n     */\r\n    static magnitude(v: Vector3): number {\r\n        return Math.sqrt((v.x * v.x) + (v.y * v.y) + (v.z * v.z));\r\n    }\r\n    /**\r\n     * Compute the unit vector for a given vector.\r\n     * \r\n     * @param v The vector\r\n     * @returns A new unit vector\r\n     */\r\n    static normalize(v: Vector3): Vector3 {\r\n        let len = Vector3.magnitude(v);\r\n        if (len > 0) {\r\n            return Vector3.divide(v, len);\r\n        } else {\r\n            return new Vector3(0, 0, 0);\r\n        }\r\n    }\r\n    /**\r\n     * Simple vector addition. \r\n     * Just add each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a + b\r\n     */\r\n    static add(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            a.x + b.x,\r\n            a.y + b.y,\r\n            a.z + b.z);\r\n    }\r\n    /**\r\n     * Simple vector subtraction. \r\n     * Just subtract each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a - b\r\n     */\r\n    static subtract(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            a.x - b.x,\r\n            a.y - b.y,\r\n            a.z - b.z);\r\n    }\r\n    /**\r\n     * Multiply each vector component by a scalar factor.\r\n     * Can be thought of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static multiply(v: Vector3, scalar: number): Vector3 {\r\n        return new Vector3(\r\n            v.x * scalar,\r\n            v.y * scalar,\r\n            v.z * scalar\r\n        );\r\n    }\r\n    /**\r\n     * Divide each vector component by a scalar factor.\r\n     * Can be thought of \"inverse\" of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The \"inverse\" scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static divide(v: Vector3, scalar: number): Vector3 {\r\n        return new Vector3(\r\n            v.x / scalar,\r\n            v.y / scalar,\r\n            v.z / scalar\r\n        );\r\n    }\r\n    /**\r\n     * Can be thought of as \"how aligned are two vectors\".\r\n     * \r\n     * Or like a projection(or the sadow) of a vector into another\r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     * \r\n     *               \r\n     *               \r\n     *              Y|     B\r\n     *               |     /|\r\n     *               |    / | \r\n     *               |   /  |\r\n     *               |  /   |\r\n     *               | /    |\r\n     *               |/     |\r\n     *               |------>A.B---------->A\r\n     *               |----------------------->\t\r\n     *                                        X\r\n     * \r\n     * PS.: compare 2D and 3D vector magnitude comments to clarify how the third component(z) affects the calculation\r\n     * \r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns The result of the dot product\r\n     */\r\n    static dotProduct(a: Vector3, b: Vector3): number {\r\n        return (a.x * b.x) + (a.y * b.y) + (a.z * b.z);\r\n    }\r\n    /**\r\n     * Computes the cross product between two vectors.\r\n     * The result of a cross product is a third vector which is orthogonal(90º) to A and B\r\n     * It can be thought of computing the normal vector to a plane described by A and B\r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns A new orthogonal vector to A and B\r\n     */\r\n    static vectorCrossProduct(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            (a.y * b.z) - (a.z * b.y),\r\n            (a.z * b.x) - (a.x * b.z),\r\n            (a.x * b.y) - (a.y * b.x)\r\n        );\r\n    }\r\n}\r\n\r\nexport class Vector4 extends Vector3 {\r\n    w: number;\r\n    /**\r\n     * \r\n     * @param x If not supplied, defaults to 0\r\n     * @param y If not supplied, defaults to 0\r\n     * @param z If not supplied, defaults to 0\r\n     * @param w If not supplied, defaults to 1\r\n     */\r\n    constructor(x?: number, y?: number, z?: number, w?: number) {\r\n        super(x ?? 0, y ?? 0, z ?? 0);\r\n        this.w = w ?? 1;\r\n    }\r\n    static forward: Vector4 = new Vector4(0, 0, -1, 1);\r\n    static backward: Vector4 = new Vector4(0, 0, 1, 1);\r\n    static up: Vector4 = new Vector4(0, 1, 0, 1);\r\n    static down: Vector4 = new Vector4(0, -1, 0, 1);\r\n    static left: Vector4 = new Vector4(-1, 0, 0, 1);\r\n    static right: Vector4 = new Vector4(1, 0, 0, 1);\r\n}","import { Vector3, Vector4 } from \"./vector\"\r\n\r\n//remember webGL is right-handed\r\n/**\r\n * This is a 4 ROWS(horizontal) by 4 COLUMNS matrix\r\n * \r\n * | r0c0  r0c1  r0c2  r0c3 | // row 0\r\n * | r1c0  r1c1  r1c2  r1c3 | // row 1\r\n * | r2c0  r2c1  r2c2  r2c3 | // row 2\r\n * | r3c0  r3c1  r3c2  r3c3 | // row 3\r\n * \r\n * BUT, the way WEBGL expects matrix data is as a single array, and \"column major\".\r\n * \r\n * So our matrix will be something like:\r\n * | r0c0  r1c0  r2c0  r3c0 | // col 0\r\n * | r0c1  r1c1  r2c1  r3c1 | // col 1\r\n * | r0c2  r1c2  r2c2  r3c2 | // col 2\r\n * | r0c3  r1c3  r2c3  r3c3 | // col 3\r\n * \r\n * or, in a single array: \r\n * \r\n * [ r0c0,  r1c0,  r2c0,  r3c0, r0c1,  r1c1,  r2c1,  r3c1,  r0c2,  r1c2,  r2c2,  r3c2, r0c3  r1c3  r2c3  r3c3 ]\r\n */\r\nexport class Matrix4 {\r\n    private elements: number[]\r\n\r\n    constructor(r0c0?: number, r0c1?: number, r0c2?: number, r0c3?: number,\r\n        r1c0?: number, r1c1?: number, r1c2?: number, r1c3?: number,\r\n        r2c0?: number, r2c1?: number, r2c2?: number, r2c3?: number,\r\n        r3c0?: number, r3c1?: number, r3c2?: number, r3c3?: number) {\r\n        this.elements = [\r\n            r0c0 ?? 0, r0c1 ?? 0, r0c2 ?? 0, r0c3 ?? 0, // thats actually a column, not a row, but i call it row!\r\n            r1c0 ?? 0, r1c1 ?? 0, r1c2 ?? 0, r1c3 ?? 0,\r\n            r2c0 ?? 0, r2c1 ?? 0, r2c2 ?? 0, r2c3 ?? 0,\r\n            r3c0 ?? 0, r3c1 ?? 0, r3c2 ?? 0, r3c3 ?? 0,\r\n        ];\r\n    }\r\n    /**\r\n     * Get elements from the matrix at a given position.\r\n     * @param row Rows are zero based!\r\n     * @param col Columns are zero based!\r\n     * @returns The value at that position\r\n     */\r\n    getElementAt(row: number, col: number): number {\r\n        return this.elements[(col * 4) + row];\r\n    }\r\n    /**\r\n     * Set the value at a given position in the matrix\r\n     * @param row Rows are zero based!\r\n     * @param col Columns are zero based!\r\n     * @param value The value to be set\r\n     */\r\n    setElementAt(row: number, col: number, value: number): void {\r\n        this.elements[(col * 4) + row] = value;\r\n    }\r\n    flatten(): number[] {\r\n        return this.elements;\r\n    }\r\n\r\n    /**\r\n     * Identity matrix is the equivalent of the number \"1\" in matrices.\r\n     * In the sense that if we multiply any matrix 'M'by an Identity matrix 'I', the result will be 'M'.\r\n     * \r\n     * M * I = M\r\n     * \r\n     * @returns The identity matrix\r\n     */\r\n    static makeIdentity(): Matrix4 {\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Make a scale matrix\r\n     * @param x scale in x\r\n     * @param y scale in y\r\n     * @param z scale in z\r\n     * @returns The scale matrix\r\n     */\r\n    static makeScale(x: number, y: number, z: number): Matrix4 {\r\n        return new Matrix4(\r\n            x, 0, 0, 0,\r\n            0, y, 0, 0,\r\n            0, 0, z, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a translation matrix\r\n     * @param x translation in x\r\n     * @param y translation in y\r\n     * @param z translation in z\r\n     * @returns The translation matrix\r\n     */\r\n    static makeTranslation(x: number, y: number, z: number): Matrix4 {\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            x, y, z, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in X axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeXRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, cosine, sine, 0,\r\n            0, -sine, cosine, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in Y axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeYRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            cosine, 0, -sine, 0,\r\n            0, 1, 0, 0,\r\n            sine, 0, cosine, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in Z axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeZRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            cosine, sine, 0, 0,\r\n            -sine, cosine, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a perspective matrix\r\n     * @param fovInRadians Field of view angle, in radians!\r\n     * @param aspectRatio width/height ratio\r\n     * @param zNear The near z coordinate\r\n     * @param zFar The far z coordinate\r\n     * @returns \r\n     */\r\n    static makePerspective(fovInRadians: number, aspectRatio: number, zNear: number, zFar: number): Matrix4 {\r\n        // let f = Math.tan(fovInRadians / 2);\r\n\r\n        // return new Matrix4(\r\n        //     1 / (aspectRatio * f), 0, 0, 0,\r\n        //     0, 1 / f, 0, 0,\r\n        //     0, 0, zFar / (zFar - zNear), -(zFar * zNear) / (zFar - zNear),\r\n        //     0, 0, 0, 1);\r\n        let f = Math.tan(Math.PI * 0.5 - 0.5 * fovInRadians);\r\n        let rangeInv = 1.0 / (zNear - zFar);\r\n\r\n        return new Matrix4(\r\n            f / aspectRatio, 0, 0, 0,\r\n            0, f, 0, 0,\r\n            0, 0, (zNear + zFar) * rangeInv, -1,\r\n            0, 0, (zNear * zFar * rangeInv * 2), 0);\r\n\r\n    }\r\n\r\n    static makeLookAtMatrix(position: Vector3, target: Vector3, up: Vector3): Matrix4 {\r\n        let zAxis = Vector3.normalize(Vector3.subtract(position, target));\r\n        let xAxis = Vector3.normalize(Vector3.vectorCrossProduct(up, zAxis));\r\n        var yAxis = Vector3.normalize(Vector3.vectorCrossProduct(zAxis, xAxis));\r\n\r\n        return new Matrix4(\r\n            xAxis.x, xAxis.y, xAxis.z, 0,\r\n            yAxis.x, yAxis.y, yAxis.z, 0,\r\n            zAxis.x, zAxis.y, zAxis.z, 0,\r\n            position.x, position.y, position.z, 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a view(camera) matrix\r\n     * @param eye The eye/camera position\r\n     * @param target The \"look at target\" (position + direction)\r\n     * @param up The UP vector\r\n     * @returns The view(camera) matrix\r\n     */\r\n    static makeViewMatrix(eye: Vector3, target: Vector3, up: Vector3): Matrix4 {\r\n        //TODO: maybe use look at matrix here\r\n        let forwardZ = Vector3.normalize(Vector3.subtract(eye, target));\r\n        let rightX = Vector3.normalize(Vector3.vectorCrossProduct(up, forwardZ));\r\n        let upY = Vector3.vectorCrossProduct(forwardZ, rightX);\r\n        //this matrix is result of multiplying a translate with rotation(inverse of) matrix:\r\n\r\n        // | 1  0  0  eyeX |     | x.x  y.x  z.x  0 |(Inverse)\r\n        // | 0  1  0  eyeY |  *  | x.y  y.y  z.y  0 |\r\n        // | 0  0  1  eyeZ |     | x.z  y.z  z.z  0 |\r\n        // | 0  0  0   1   |     |  0    0    0   1 |\r\n\r\n        //since it is an orthogonal matrix, to compute the inverse we just transpose:\r\n        // | 1  0  0  eyeX |     | x.x  x.y  x.z  0 |(Inverse)\r\n        // | 0  1  0  eyeY |  *  | y.x  y.y  y.z  0 |\r\n        // | 0  0  1  eyeZ |     | z.x  z.y  z.z  0 |\r\n        // | 0  0  0   1   |     |  0    0    0   1 |\r\n\r\n        // | x.x  x.y  x.z  -dot(x, eye) |\r\n        // | y.x  y.y  y.z  -dot(y, eye) |\r\n        // | z.x  y.z  z.z  -dot(z, eye) |\r\n        // |  0    0    0        1       |\r\n\r\n        // return new Matrix4(\r\n        //     rightX.x,     rightX.y,     rightX.z,   -Vector3.dotProduct(rightX, eye),\r\n        //     upY.x,           upY.y,        upY.z,      -Vector3.dotProduct(upY, eye),\r\n        //     forwardZ.x, forwardZ.y,   forwardZ.z, -Vector3.dotProduct(forwardZ, eye),\r\n        //     0,                   0,            0,                                  1\r\n        // );\r\n        return new Matrix4(\r\n            rightX.x, upY.x, forwardZ.x, 0,\r\n            rightX.y, upY.y, forwardZ.y, 0,\r\n            rightX.z, upY.z, forwardZ.z, 0,\r\n            -Vector3.dotProduct(rightX, eye), -Vector3.dotProduct(upY, eye), -Vector3.dotProduct(forwardZ, eye), 1\r\n        );\r\n\r\n\r\n    }\r\n    /**\r\n     * Multiply a Vector by a Matrix.\r\n     * Can be thought of as \"applying a transformation\" to a vector\r\n     * @param m The matrix\r\n     * @param v The vector\r\n     * @returns Transformed vector\r\n     */\r\n    static multiplyMatrix4ByVector4(m: Matrix4, v: Vector4): Vector4 {\r\n        return new Vector4(\r\n            // v.x * m.getElementAt(0, 0) + v.y * m.getElementAt(1, 0) + v.z * m.getElementAt(2, 0) + v.w * m.getElementAt(3, 0),\r\n            // v.x * m.getElementAt(0, 1) + v.y * m.getElementAt(1, 1) + v.z * m.getElementAt(2, 1) + v.w * m.getElementAt(3, 1),\r\n            // v.x * m.getElementAt(0, 2) + v.y * m.getElementAt(1, 2) + v.z * m.getElementAt(2, 2) + v.w * m.getElementAt(3, 2),\r\n            // v.x * m.getElementAt(0, 3) + v.y * m.getElementAt(1, 3) + v.z * m.getElementAt(2, 3) + v.w * m.getElementAt(3, 3),\r\n            v.x * m.getElementAt(0, 0) + v.y * m.getElementAt(0, 1) + v.z * m.getElementAt(0, 2) + v.w * m.getElementAt(0, 3),\r\n            v.x * m.getElementAt(1, 0) + v.y * m.getElementAt(1, 1) + v.z * m.getElementAt(1, 2) + v.w * m.getElementAt(1, 3),\r\n            v.x * m.getElementAt(2, 0) + v.y * m.getElementAt(2, 1) + v.z * m.getElementAt(2, 2) + v.w * m.getElementAt(2, 3),\r\n            v.x * m.getElementAt(3, 0) + v.y * m.getElementAt(3, 1) + v.z * m.getElementAt(3, 2) + v.w * m.getElementAt(3, 3),\r\n        );\r\n    }\r\n    /**\r\n     * Multiply two matrices.\r\n     * Can be thought of as \"accumulating matrices transformations\"\r\n     * @param a Some matrix\r\n     * @param b Some other matrix\r\n     * @returns Multiplied matrix\r\n     */\r\n    static multiplyMatrices4(a: Matrix4, b: Matrix4): Matrix4 {\r\n        let multiplied = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let value = (b.getElementAt(i, 0) * a.getElementAt(0, j)) +\r\n                    (b.getElementAt(i, 1) * a.getElementAt(1, j)) +\r\n                    (b.getElementAt(i, 2) * a.getElementAt(2, j)) +\r\n                    (b.getElementAt(i, 3) * a.getElementAt(3, j));\r\n                multiplied.setElementAt(i, j, value);\r\n            }\r\n        }\r\n        return multiplied;\r\n    }\r\n    /**\r\n     * Transpose a matrix. \r\n     * Rows become columns and vice versa\r\n     * @param m the matrix\r\n     * @returns transposed matrix\r\n     */\r\n    static transpose(m: Matrix4): Matrix4 {\r\n        let transposed = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                transposed.setElementAt(i, j, m.getElementAt(j, i));\r\n            }\r\n        }\r\n        return transposed;\r\n    }\r\n\r\n    static copy(m: Matrix4): Matrix4 {\r\n        let copied = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                copied.setElementAt(i, j, m.getElementAt(i, j));\r\n            }\r\n        }\r\n        return copied;\r\n    }\r\n\r\n    static inverse(m: Matrix4): Matrix4 {\r\n        //matrix inverse from https://webglfundamentals.org/\r\n        //this.elements[(col * 4) + row];\r\n        let m00 = m.getElementAt(0, 0);\r\n        let m01 = m.getElementAt(1, 0);\r\n        let m02 = m.getElementAt(2, 0);\r\n        let m03 = m.getElementAt(3, 0);\r\n        let m10 = m.getElementAt(0, 1);\r\n        let m11 = m.getElementAt(1, 1);\r\n        let m12 = m.getElementAt(2, 1);\r\n        let m13 = m.getElementAt(3, 1);\r\n        let m20 = m.getElementAt(0, 2);\r\n        let m21 = m.getElementAt(1, 2);\r\n        let m22 = m.getElementAt(2, 2);\r\n        let m23 = m.getElementAt(3, 2);\r\n        let m30 = m.getElementAt(0, 3);\r\n        let m31 = m.getElementAt(1, 3);\r\n        let m32 = m.getElementAt(2, 3);\r\n        let m33 = m.getElementAt(3, 3);\r\n\r\n        let tmp_0 = m22 * m33;\r\n        let tmp_1 = m32 * m23;\r\n        let tmp_2 = m12 * m33;\r\n        let tmp_3 = m32 * m13;\r\n        let tmp_4 = m12 * m23;\r\n        let tmp_5 = m22 * m13;\r\n        let tmp_6 = m02 * m33;\r\n        let tmp_7 = m32 * m03;\r\n        let tmp_8 = m02 * m23;\r\n        let tmp_9 = m22 * m03;\r\n        let tmp_10 = m02 * m13;\r\n        let tmp_11 = m12 * m03;\r\n        let tmp_12 = m20 * m31;\r\n        let tmp_13 = m30 * m21;\r\n        let tmp_14 = m10 * m31;\r\n        let tmp_15 = m30 * m11;\r\n        let tmp_16 = m10 * m21;\r\n        let tmp_17 = m20 * m11;\r\n        let tmp_18 = m00 * m31;\r\n        let tmp_19 = m30 * m01;\r\n        let tmp_20 = m00 * m21;\r\n        let tmp_21 = m20 * m01;\r\n        let tmp_22 = m00 * m11;\r\n        let tmp_23 = m10 * m01;\r\n\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n\r\n        return new Matrix4(\r\n            d * t0,\r\n            d * t1,\r\n            d * t2,\r\n            d * t3,\r\n            d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n                (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),\r\n            d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n                (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),\r\n            d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n                (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),\r\n            d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n                (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),\r\n            d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n                (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),\r\n            d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n                (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),\r\n            d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n                (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),\r\n            d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n                (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),\r\n            d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n                (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),\r\n            d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n                (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),\r\n            d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n                (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),\r\n            d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n                (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))\r\n        );\r\n    }\r\n}","export class webglUtils {\r\n\r\n    static loadFromScript(gl: WebGLRenderingContext, shaderElem: HTMLScriptElement, shaderType: GLenum): WebGLShader {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderElem.text);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.error(\"Something went wrong when compiling a vertex shader. More info:\", gl.getShaderInfoLog(shader));\r\n            return;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    static createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.error(\"Something went wrong when compiling a vertex shader. More info:\", gl.getShaderInfoLog(program));\r\n            gl.deleteProgram(program);\r\n            return null;\r\n        }\r\n        return program;\r\n    }\r\n}","import { Matrix4 } from \"./matrix\";\r\nimport { Vector3, Vector4 } from \"./vector\";\r\n\r\nexport class Transform {\r\n    position: Vector3;\r\n    rotation: Vector3;\r\n    scale: Vector3;\r\n    up: Vector3;\r\n    right: Vector3;\r\n    forward: Vector3;\r\n    private worldViewMatrix: Matrix4;\r\n    private worldMatrix: Matrix4;\r\n    private localMatrix: Matrix4;\r\n    constructor(position?: Vector3, rotation?: Vector3, scale?: Vector3, up?: Vector3, right?: Vector3, forward?: Vector3) {\r\n        this.position = position ?? new Vector3();\r\n        this.rotation = rotation ?? new Vector3();\r\n        this.scale = scale ?? new Vector3(1, 1, 1);\r\n        this.up = up ?? Vector3.up;\r\n        this.right = right ?? Vector3.right;\r\n        this.forward = forward ?? Vector3.forward;\r\n    }\r\n    reset(): void {\r\n        this.position = new Vector3();\r\n        this.rotation = new Vector3();\r\n        this.scale = new Vector3(1, 1, 1);\r\n    }\r\n    rotate(angles: Vector3): void {\r\n        this.rotation = Vector3.add(this.rotation, angles);\r\n        //1. make rotation matrices\r\n        //2. multiply direction vectors by the matrix\r\n        this.computeDirectionVectors();\r\n    }\r\n    //TODO: make sure directions are computed only when needed, but always when needed\r\n    computeDirectionVectors(): void {\r\n        //1. make rotation matrices\r\n        let rotationZMatrix = Matrix4.makeZRotation(this.rotation.z);\r\n        let rotationYMatrix = Matrix4.makeYRotation(this.rotation.y);\r\n        let rotationXMatrix = Matrix4.makeXRotation(this.rotation.x);\r\n\r\n        let rotationMatrix = Matrix4.multiplyMatrices4(rotationYMatrix, rotationZMatrix);\r\n        rotationMatrix = Matrix4.multiplyMatrices4(rotationXMatrix, rotationMatrix);\r\n        //2. multiply direction vectors by the matrix\r\n        this.up = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.up) as Vector3;\r\n        this.forward = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.forward) as Vector3;\r\n        this.right = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.right) as Vector3;\r\n    }\r\n    rotateAround(angles: number, target: Vector3, axis: Vector3): void {\r\n        let rotateAroundMatrix = Matrix4.makeIdentity();\r\n\r\n        let toTargetTranslationMatrix = Matrix4.makeTranslation(-target.x, -target.y, -target.z);\r\n        let backInplaceMatrix = Matrix4.makeTranslation(target.x, target.y, target.z);\r\n\r\n        let xRotationMatrix = Matrix4.makeXRotation(axis.x * angles);\r\n        let yRotationMatrix = Matrix4.makeYRotation(axis.y * angles);\r\n        let zRotationMatrix = Matrix4.makeZRotation(axis.z * angles);\r\n\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(backInplaceMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(zRotationMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(yRotationMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(xRotationMatrix, rotateAroundMatrix);\r\n        rotateAroundMatrix = Matrix4.multiplyMatrices4(toTargetTranslationMatrix, rotateAroundMatrix);\r\n\r\n        this.position = Matrix4.multiplyMatrix4ByVector4(rotateAroundMatrix, new Vector4(this.position.x, this.position.y, this.position.z)) as Vector3;\r\n\r\n        //this.computeDirectionVectors();\r\n    }\r\n    translate(translation: Vector3): void {\r\n        this.position = Vector3.add(this.position, translation);\r\n    }\r\n    computeWorldViewMatrices(viewProjectionMatrix: Matrix4): void {\r\n        this.worldViewMatrix = Matrix4.multiplyMatrices4(this.worldMatrix, viewProjectionMatrix);\r\n    }\r\n    updateLocalMatrix(): void {\r\n        this.localMatrix = Matrix4.makeIdentity();\r\n        let translationMatrix = Matrix4.makeTranslation(this.position.x, this.position.y, this.position.z);\r\n        let XRotationMatrix = Matrix4.makeXRotation(this.rotation.x);\r\n        let yRotationMatrix = Matrix4.makeYRotation(this.rotation.y);\r\n        let zRotationMatrix = Matrix4.makeZRotation(this.rotation.z);\r\n        let scaleMatrix = Matrix4.makeScale(this.scale.x, this.scale.y, this.scale.z);\r\n\r\n        this.localMatrix = Matrix4.multiplyMatrices4(translationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(XRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(yRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(zRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(scaleMatrix, this.localMatrix);\r\n    }\r\n\r\n    updateWorldMatrix(parentMatrix?: Matrix4): void {\r\n        if (parentMatrix)\r\n            this.worldMatrix = Matrix4.multiplyMatrices4(this.localMatrix, parentMatrix);\r\n        else\r\n            this.worldMatrix = Matrix4.copy(this.localMatrix);\r\n    }\r\n    getWorldViewMatrix(): Matrix4 {\r\n        return this.worldViewMatrix;\r\n    }\r\n    getWorldMatrix(): Matrix4 {\r\n        return this.worldMatrix;\r\n    }\r\n    lookAt(target: Vector3, up: Vector3): void {\r\n        let lookAtMatrix = Matrix4.makeLookAtMatrix(this.position, target, Vector3.up);\r\n        this.rotation = Matrix4.multiplyMatrix4ByVector4(lookAtMatrix, new Vector4(this.rotation.x, this.rotation.y, this.rotation.z)) as Vector3;\r\n    }\r\n}\r\n","import { Matrix4 } from \"./matrix\";\r\nimport { Mesh } from \"./mesh\";\r\nimport { Transform } from \"./transform\";\r\n\r\n//This is not really a \"Game object\", since it is not even close to be a \"game\"\r\n//But i like this name \"GameObject-ish\"\r\nexport class GameObject {\r\n    parent: GameObject;\r\n    children: GameObject[];\r\n    name: string;\r\n    transform: Transform;\r\n    mesh?: Mesh;\r\n    //..Material?\r\n    //..behaviours??\r\n    constructor(transform?: Transform, mesh?: Mesh) {\r\n        this.transform = transform ?? new Transform();\r\n        this.mesh = mesh ?? null;\r\n        this.children = [];\r\n    }\r\n\r\n    updateLocalMatrices(): void {\r\n        this.transform.updateLocalMatrix();\r\n        this.children.forEach(child => {\r\n            child.updateLocalMatrices();\r\n        });\r\n    }\r\n    updateWorldMatrices(parentMatrix?: Matrix4): void {\r\n        this.transform.updateWorldMatrix(parentMatrix);\r\n        this.children.forEach(child => {\r\n            child.updateWorldMatrices(this.transform.getWorldMatrix());\r\n        });\r\n    }\r\n    setParent(parent: GameObject): void {\r\n        // remove us from our parent\r\n        if (this.parent) {\r\n            var ndx = this.parent.children.indexOf(this);\r\n            if (ndx >= 0) {\r\n                this.parent.children.splice(ndx, 1);\r\n            }\r\n        }\r\n        // Add us to our new parent\r\n        if (parent) {\r\n            parent.children.push(this);\r\n        }\r\n        this.parent = parent;\r\n    }\r\n}\r\n\r\n//The idea is to make something every frame\r\n//This 'something' will be inside the update function\r\nexport interface Component {\r\n    update(): void;\r\n}","import { Matrix4 } from \"./matrix\";\r\nimport { Transform } from \"./transform\";\r\n\r\n//TODO: this camera class can only represent a perspective camera...\r\n//      make so we can represent other types(like ortho?) of cameras...\r\n//      maybe, create specialized types extending this 'base' camera?\r\nexport class Camera {\r\n    transform: Transform;\r\n    fieldOfView: number;\r\n    aspectRatio: number;\r\n    near: number;\r\n    far: number;\r\n    private perspectiveMatrix: Matrix4;\r\n    private static activeCamera: Camera = null;\r\n    constructor(fieldOfView: number, aspectRatio: number, near: number, far: number) {\r\n        this.fieldOfView = fieldOfView;\r\n        this.aspectRatio = aspectRatio;\r\n        this.near = near;\r\n        this.far = far;\r\n        this.transform = new Transform();\r\n\r\n        if (Camera.getActiveCamera() === null) {\r\n            Camera.setActiveCamera(this);\r\n        }\r\n    }\r\n    computePerspectiveMatrix(): void {\r\n        this.perspectiveMatrix = Matrix4.makePerspective(\r\n            this.fieldOfView,\r\n            this.aspectRatio,\r\n            this.near,\r\n            this.far\r\n        );\r\n    }\r\n    getPerspectiveMatrix(): Matrix4 {\r\n        return this.perspectiveMatrix;\r\n    }\r\n    static getActiveCamera(): Camera {\r\n        return Camera.activeCamera;\r\n    }\r\n    static setActiveCamera(camera: Camera): void {\r\n        Camera.activeCamera = camera;\r\n    }\r\n}\r\n\r\n","import { GameObject } from \"./gameobject\";\r\nimport { Matrix4 } from \"./matrix\";\r\nimport { Vector3 } from \"./vector\";\r\n\r\nexport class Renderer {\r\n    private program: WebGLProgram;\r\n    private context: WebGLRenderingContext;\r\n    private vertexBuffer: WebGLBuffer;\r\n    private normalBuffer: WebGLBuffer;\r\n    private texCoordsBuffer: WebGLBuffer;\r\n\r\n    private positionAttributeLocation: number;\r\n    private texCoordsAttributeLocation: number;\r\n    private normalsAttributeLocation: number;\r\n    private worldViewMatrixUniformLocation: WebGLUniformLocation;\r\n    private worldInverseTransposeMatrixLocation: WebGLUniformLocation;\r\n    private reverseLightDirectionLocation: WebGLUniformLocation;\r\n\r\n    constructor(context: WebGLRenderingContext, program: WebGLProgram) {\r\n        this.context = context;\r\n        this.program = program;\r\n        //creating buffers\r\n        this.vertexBuffer = this.context.createBuffer();\r\n        this.normalBuffer = this.context.createBuffer();\r\n        this.texCoordsBuffer = this.context.createBuffer();\r\n\r\n        context.pixelStorei(context.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this.positionAttributeLocation = context.getAttribLocation(program, \"a_position\");\r\n        this.texCoordsAttributeLocation = context.getAttribLocation(program, \"a_texcoord\");\r\n        this.normalsAttributeLocation = context.getAttribLocation(program, \"a_normal\");\r\n        this.worldViewMatrixUniformLocation = context.getUniformLocation(program, \"u_worldViewMatrix\");\r\n        this.worldInverseTransposeMatrixLocation = context.getUniformLocation(program, \"u_worldInverseTransposeMatrix\");\r\n        this.reverseLightDirectionLocation = context.getUniformLocation(program, \"u_reverseLightDirection\");\r\n    }\r\n    getContext(): WebGLRenderingContext {\r\n        return this.context;\r\n    }\r\n    loadTexture(img: HTMLImageElement): WebGLTexture {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, this.context.RGBA, this.context.UNSIGNED_BYTE, img);\r\n        this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n    bufferData(gameObjects: GameObject[]): void {\r\n        let arrLen = 0;\r\n        let arrIndex = 0;\r\n        let vertexArr: Float32Array;\r\n        let normalArr: Float32Array;\r\n        let texCoordArr: Float32Array;\r\n        //count vertices so we can initialize the array with a fixed len\r\n        gameObjects.forEach(gameObj => {\r\n            arrLen += gameObj.mesh.vertices.length * 3;\r\n        });\r\n\r\n        //lets \"flatten\" data single arrays\r\n        vertexArr = new Float32Array(arrLen);\r\n        gameObjects.forEach(gameObj => {\r\n            gameObj.mesh.bufferOffset = arrIndex / 3;\r\n            gameObj.mesh.vertices.forEach(vertex => {\r\n                vertexArr[arrIndex++] = vertex.x;\r\n                vertexArr[arrIndex++] = vertex.y;\r\n                vertexArr[arrIndex++] = vertex.z;\r\n            });\r\n        });\r\n\r\n        arrIndex = 0;\r\n        normalArr = new Float32Array(arrLen);\r\n        gameObjects.forEach(gameObj => {\r\n            gameObj.mesh.normals.forEach(normal => {\r\n                normalArr[arrIndex++] = normal.x;\r\n                normalArr[arrIndex++] = normal.y;\r\n                normalArr[arrIndex++] = normal.z;\r\n            });\r\n        });\r\n\r\n        arrIndex = 0;\r\n        texCoordArr = new Float32Array(arrLen);\r\n        gameObjects.forEach(gameObj => {\r\n            gameObj.mesh.uvCoords.forEach(texCoord => {\r\n                texCoordArr[arrIndex++] = texCoord.x;\r\n                texCoordArr[arrIndex++] = texCoord.y;\r\n            });\r\n        });\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.context.bufferData(this.context.ARRAY_BUFFER, vertexArr, this.context.STATIC_DRAW);\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, this.texCoordsBuffer);\r\n        this.context.bufferData(this.context.ARRAY_BUFFER, texCoordArr, this.context.STATIC_DRAW);\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, this.normalBuffer);\r\n        this.context.bufferData(this.context.ARRAY_BUFFER, normalArr, this.context.STATIC_DRAW);\r\n    }\r\n    render(gameObjects: GameObject[]): void {\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        this.context.viewport(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        this.context.useProgram(this.program);\r\n        this.context.enable(this.context.CULL_FACE);\r\n        this.context.enable(this.context.DEPTH_TEST);\r\n        this.context.clearColor(0.5, 0.5, 0.5, 1);\r\n        this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\r\n        \r\n        for (let i = 0; i < gameObjects.length; i++) {\r\n            if (gameObjects[i].mesh === null) continue;\r\n\r\n            //set uniforms\r\n            this.context.uniformMatrix4fv(this.worldViewMatrixUniformLocation, false, gameObjects[i].transform.getWorldViewMatrix().flatten());\r\n            let worldInverse = Matrix4.inverse(gameObjects[i].transform.getWorldMatrix());\r\n            this.context.uniformMatrix4fv(this.worldInverseTransposeMatrixLocation, false, Matrix4.transpose(worldInverse).flatten());\r\n            let reverseLightDirectionVector = Vector3.normalize(new Vector3(0.5, 0.7, 1));\r\n            this.context.uniform3fv(\r\n                this.reverseLightDirectionLocation,\r\n                new Float32Array([\r\n                    reverseLightDirectionVector.x,\r\n                    reverseLightDirectionVector.y,\r\n                    reverseLightDirectionVector.z])\r\n            );\r\n\r\n            //bind buffers\r\n            this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\r\n            this.context.enableVertexAttribArray(this.positionAttributeLocation);\r\n            //Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n            this.context.vertexAttribPointer(\r\n                this.positionAttributeLocation,\r\n                3,          // we are passing 3 components per iteration\r\n                this.context.FLOAT,   // the type of each component\r\n                false,      // should normalize?\r\n                0,          // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n                0           // 0 = start at the beginning of the buffer\r\n            );\r\n\r\n            this.context.bindBuffer(this.context.ARRAY_BUFFER, this.texCoordsBuffer);\r\n            this.context.enableVertexAttribArray(this.texCoordsAttributeLocation);\r\n            this.context.vertexAttribPointer(\r\n                this.texCoordsAttributeLocation,\r\n                2,         // we are passing 2 components per iteration\r\n                this.context.FLOAT,  // the type of each component\r\n                false,     // should normalize?\r\n                0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n                0          // 0 = start at the beginning of the buffer\r\n            );\r\n\r\n            this.context.bindBuffer(this.context.ARRAY_BUFFER, this.normalBuffer);\r\n            this.context.enableVertexAttribArray(this.normalsAttributeLocation);\r\n            this.context.vertexAttribPointer(\r\n                this.normalsAttributeLocation,\r\n                3,         // we are passing 3 components per iteration\r\n                this.context.FLOAT,  // the type of each component\r\n                false,     // should normalize?\r\n                0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n                0          // 0 = start at the beginning of the buffer\r\n            );\r\n            this.context.activeTexture(this.context.TEXTURE0);\r\n            this.context.bindTexture(this.context.TEXTURE_2D, gameObjects[i].mesh.texture);\r\n\r\n            this.context.drawArrays(\r\n                gameObjects[i].mesh.drawMode,\r\n                gameObjects[i].mesh.bufferOffset,\r\n                gameObjects[i].mesh.vertices.length\r\n            );\r\n        }\r\n    }\r\n}","import { Face, Mesh } from \"../Rendering/mesh\";\r\nimport { Vector2, Vector3 } from \"../Rendering/vector\";\r\n\r\nexport class ObjParser {\r\n    static parse(text: string): Mesh[] {\r\n        let meshes: Mesh[] = [];\r\n        let currentMesh = new Mesh();\r\n        meshes.push(currentMesh);\r\n        //lets arrange this so its easier to access when reading face data\r\n        let data = [currentMesh.vertices, currentMesh.uvCoords, currentMesh.normals];\r\n\r\n        //data from file\r\n        let allPositions: Vector3[] = [new Vector3()]; //1-based array, just ignore the zero-th position\r\n        let allTexCoords: Vector2[] = [new Vector2()]; //1-based array, just ignore the zero-th position\r\n        let allNormals: Vector3[] = [new Vector3()]; //1-based array, just ignore the zero-th position\r\n        //lets arrange this so its easier to access when reading face data\r\n        let allData = [allPositions, allTexCoords, allNormals];\r\n\r\n        let keywords: { [funcName: string]: (parts: string[]) => void; } = {\r\n            v(parts: string[]) {\r\n                const numbers = parts.map(parseFloat);\r\n                allPositions.push(new Vector3(numbers[0], numbers[1], numbers[2]));\r\n            },\r\n            vn(parts: string[]) {\r\n                const numbers = parts.map(parseFloat);\r\n                allNormals.push(new Vector3(numbers[0], numbers[1], numbers[2]));\r\n            },\r\n            vt(parts: string[]) {\r\n                const numbers = parts.map(parseFloat);\r\n                allTexCoords.push(new Vector3(numbers[0], numbers[1], numbers[2]));\r\n            },\r\n            f(parts: string[]) {\r\n                const numTriangles = parts.length - 2;\r\n                for (let tri = 0; tri < numTriangles; ++tri) {\r\n                    addVertex(parts[0]);\r\n                    addVertex(parts[tri + 1]);\r\n                    addVertex(parts[tri + 2]);\r\n                }\r\n            },\r\n            usemtl(parts: string[]) {\r\n                if (currentMesh.vertices.length > 0) {\r\n                currentMesh = new Mesh();\r\n                meshes.push(currentMesh);\r\n                data = [currentMesh.vertices, currentMesh.uvCoords, currentMesh.normals];\r\n                }\r\n            },\r\n            o(parts: string[]) {\r\n                if (currentMesh.vertices.length > 0) {\r\n                    currentMesh = new Mesh();\r\n                    meshes.push(currentMesh);\r\n                    data = [currentMesh.vertices, currentMesh.uvCoords, currentMesh.normals];\r\n                }\r\n            },\r\n        };\r\n\r\n        const keywordRE = /(\\w*)(?: )*(.*)/;\r\n        const lines = text.split('\\n');\r\n        for (let lineNo = 0; lineNo < lines.length; ++lineNo) {\r\n            const line = lines[lineNo].trim();\r\n            if (line === '' || line.startsWith('#')) {\r\n                continue;\r\n            }\r\n            const m = keywordRE.exec(line);\r\n            if (!m) {\r\n                continue;\r\n            }\r\n            const [, keyword, unparsedArgs] = m;\r\n            const parts = line.split(/\\s+/).slice(1);\r\n            const handler = keywords[keyword];\r\n            if (!handler) {\r\n                //console.warn('unhandled keyword:', keyword, 'at line', lineNo + 1);\r\n                continue;\r\n            }\r\n            handler(parts);\r\n        }\r\n\r\n        function addVertex(vert: string) {\r\n            const ptn = vert.split('/');\r\n            ptn.forEach((objIndexStr, i) => {\r\n                if (!objIndexStr) {\r\n                    return;\r\n                }\r\n                const objIndex = parseInt(objIndexStr);\r\n                const index = objIndex + (objIndex >= 0 ? 0 : allData[i].length);\r\n                data[i].push(allData[i][index]);\r\n            });\r\n        }\r\n        return meshes;\r\n    }\r\n}","import { ObjParser } from \"./ObjFile\";\r\n\r\nexport class FileLoader {\r\n    \r\n    static async loadOBJ(url: string) {\r\n        let text = await this.loadText(url);\r\n        return ObjParser.parse(text);\r\n    }\r\n\r\n    static async loadText(url: string) {\r\n        let response = await fetch(url);\r\n        return response.text();\r\n    }\r\n\r\n    static async loadJson<T>(url: string) {\r\n        let response = await fetch(url);\r\n        return response.json() as Promise<T>;\r\n    }\r\n\r\n    static async loadImage(url: string): Promise<HTMLImageElement> {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.addEventListener('load', () => {\r\n                resolve(img);\r\n            });\r\n            img.src = url;\r\n        });\r\n    }\r\n}","export function radToDeg(r: number): number {\r\n    return r * 180 / Math.PI;\r\n}\r\n\r\nexport function degToRad(d: number): number {\r\n    return d * Math.PI / 180;\r\n}\r\n\r\nexport function randomIntFromInterval(min: number, max: number) { // min and max included \r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}","import { Vector3 } from \"./Rendering/vector\"\r\nimport { Matrix4 } from \"./Rendering/matrix\"\r\nimport { DrawMode, Mesh } from \"./Rendering/mesh\";\r\nimport { webglUtils } from \"./Etc/webglUtils\"\r\nimport { GameObject } from \"./Rendering/gameobject\";\r\nimport { Transform } from \"./Rendering/transform\";\r\nimport { Camera } from \"./Rendering/camera\";\r\nimport { Renderer } from \"./Rendering/renderer\";\r\nimport { FileLoader } from \"./File/FileLoader\";\r\nimport { degToRad } from \"./Etc/mathFunctions\";\r\n\r\n// stuff related to camera and camera movement\r\nlet firsPersonCamera = {\r\n    cameraObj: null as Camera,\r\n    forwardVelocity: new Vector3(0, 0, 0),\r\n    rightVelocity: new Vector3(0, 0, 0),\r\n    maxXRotation: degToRad(89),\r\n    minXRotation: degToRad(-89),\r\n    cameraSpeed: 20,\r\n    mouseSensibility: 0.1,\r\n    Move(direction: Vector3) {\r\n        let cam = this.cameraObj as Camera;\r\n        let speed = this.cameraSpeed * deltaTime;\r\n        let forwardVelocity = Vector3.multiply(cam.transform.forward, -direction.z);\r\n        let rightVelocity = Vector3.multiply(cam.transform.right, direction.x);\r\n        let velocity = Vector3.multiply(Vector3.add(forwardVelocity, rightVelocity), speed);\r\n        cam.transform.translate(velocity);\r\n    },\r\n    Rotate(rotationAmount: Vector3) {\r\n        let cam = this.cameraObj as Camera;\r\n        let rotation = cam.transform.rotation;\r\n        let speed = this.mouseSensibility * deltaTime;\r\n        rotation.x -= speed * rotationAmount.x;\r\n        rotation.y -= speed * rotationAmount.y;\r\n        if (rotation.x > this.maxXRotation) rotation.x = this.maxXRotation;\r\n        else if (rotation.x < this.minXRotation) rotation.x = this.minXRotation;\r\n        cam.transform.rotation = rotation;\r\n        cam.transform.rotate(Vector3.zero);\r\n    }\r\n};\r\n\r\n// this is for keyboard event handling\r\n// when 'keydown' happens, we set to true\r\n// when 'keyup' happens, we set to false\r\n// in the gameloop we process input based on this flags.\r\nlet controls = {\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false\r\n}\r\n\r\n/**\r\n * Time since last frame, in seconds\r\n */\r\nlet deltaTime = 0;\r\nlet previousFrameTime = 0;\r\n\r\n//vars for counting frames\r\nlet frameCount = 0;\r\nlet timeForFPS = 0;\r\n\r\nlet renderer: Renderer;\r\n//array of game objects\r\nlet rootGameObject = new GameObject();\r\nlet gameObjects = new Array<GameObject>();\r\n\r\nlet allstarImage: HTMLImageElement;\r\nlet allstarMeshes: Mesh[];\r\n\r\nwindow.onload = main;\r\nfunction main(): void {\r\n    //first of all, load resources!\r\n    loadResources().then(() => {\r\n        setup();\r\n        instantiateObjects();\r\n        renderer.bufferData(gameObjects); // This should be called everytime we add or remove meshes to the scene\r\n        createEventHandlers();\r\n        requestAnimationFrame(gameLoop);\r\n    });\r\n\r\n}\r\n\r\nfunction setup(): void {\r\n    let canvasElem: HTMLCanvasElement = document.querySelector(\"#canvas\");\r\n    let vertexShaderElem: HTMLScriptElement = document.querySelector(\"#vertex-shader-3d-textured-lit\");\r\n    let fragmentShaderElem: HTMLScriptElement = document.querySelector(\"#fragment-shader-3d-textured-lit\");\r\n\r\n    //initialize canvas and webgl stuff\r\n    let gl = canvasElem.getContext(\"webgl\");\r\n    if (!gl) {\r\n        console.error(\"Something went wrong while creating webgl context\");\r\n        return;\r\n    }\r\n\r\n    let vertexShader = webglUtils.loadFromScript(gl, vertexShaderElem, gl.VERTEX_SHADER);\r\n    let fragmentShader = webglUtils.loadFromScript(gl, fragmentShaderElem, gl.FRAGMENT_SHADER);\r\n    let program = webglUtils.createProgram(gl, vertexShader, fragmentShader);\r\n\r\n    renderer = new Renderer(gl, program);\r\n\r\n    const aspect = canvasElem.clientWidth / canvasElem.clientHeight;\r\n    let yFov = degToRad(60); //To radians;\r\n    let zNear = 1;\r\n    let zFar = 2000;\r\n\r\n    firsPersonCamera.cameraObj = new Camera(\r\n        yFov,\r\n        aspect,\r\n        zNear,\r\n        zFar\r\n    );\r\n    firsPersonCamera.cameraObj.computePerspectiveMatrix();\r\n}\r\n\r\nasync function loadResources() {\r\n    //we load everything we need to start rendering here....\r\n    let allstarImagePromise = FileLoader.loadImage(\"./assets/allstar.png\");\r\n    let allstarMeshesPromise = FileLoader.loadOBJ(\"./assets/allstar.obj\");\r\n    let promises: Promise<any>[] = [allstarImagePromise, allstarMeshesPromise];\r\n    \r\n    //resume only when everything is ready....\r\n    await Promise.all(promises).then((values) => {\r\n        allstarImage = values[0];\r\n        allstarMeshes = values[1];\r\n    });\r\n}\r\n\r\nfunction instantiateObjects(): void {\r\n    let allstarTexture = renderer.loadTexture(allstarImage);\r\n\r\n    allstarMeshes.forEach(m => {\r\n        m.texture = allstarTexture;\r\n        m.drawMode = DrawMode.Texture;\r\n        let newObj = new GameObject(\r\n            new Transform(\r\n                new Vector3(0, 1.5, -5),\r\n                new Vector3(0, 0, 0),\r\n                new Vector3(5, 5, 5),\r\n            ),\r\n            m\r\n        );\r\n        newObj.setParent(rootGameObject);\r\n        gameObjects.push(newObj);\r\n    });\r\n}\r\n\r\nfunction gameLoop(now: number): void {\r\n    now *= 0.001;\r\n    deltaTime = now - previousFrameTime;\r\n    previousFrameTime = now;\r\n    //computeFramesPerSecond();\r\n    processInput();\r\n    update();\r\n    renderer.render(gameObjects);\r\n    requestAnimationFrame(gameLoop);\r\n}\r\n\r\nfunction processInput() {\r\n\r\n    let direction = new Vector3();\r\n    if (controls.up) direction = Vector3.add(direction, Vector3.forward);\r\n    if (controls.down) direction = Vector3.add(direction, Vector3.backward);\r\n    if (controls.right) direction = Vector3.add(direction, Vector3.right);\r\n    if (controls.left) direction = Vector3.add(direction, Vector3.left);\r\n\r\n    firsPersonCamera.Move(direction);\r\n}\r\n\r\nfunction update(): void {\r\n    let camera = Camera.getActiveCamera();\r\n    let projectionMatrix = camera.getPerspectiveMatrix();\r\n    let viewMatrix = Matrix4.makeViewMatrix(\r\n        camera.transform.position,\r\n        Vector3.add(camera.transform.position, camera.transform.forward),\r\n        Vector3.up);\r\n\r\n    rootGameObject.updateLocalMatrices();\r\n    rootGameObject.updateWorldMatrices();\r\n\r\n    for (let i = 0; i < gameObjects.length; i++) {\r\n        gameObjects[i].transform.computeWorldViewMatrices(Matrix4.multiplyMatrices4(viewMatrix, projectionMatrix));\r\n    }\r\n}\r\n\r\nfunction createEventHandlers(): void {\r\n    document.addEventListener(\"keydown\", function (event: KeyboardEvent) {\r\n        if (event.key === 'w') {\r\n            controls.up = true;\r\n        } else if (event.key === 's') {\r\n            controls.down = true;\r\n        } else if (event.key === 'a') {\r\n            controls.left = true;\r\n        } else if (event.key === 'd') {\r\n            controls.right = true;\r\n        } else if (event.key === 'Enter') {\r\n            //console.log(controls);\r\n        }\r\n    });\r\n    document.addEventListener(\"keyup\", function (event: KeyboardEvent) {\r\n        if (event.key === 'w') {\r\n            controls.up = false;\r\n        } else if (event.key === 's') {\r\n            controls.down = false;\r\n        } else if (event.key === 'a') {\r\n            controls.left = false;\r\n        } else if (event.key === 'd') {\r\n            controls.right = false;\r\n        } else if (event.key === 'Enter') {\r\n            //console.log(controls);\r\n        }\r\n    });\r\n\r\n    // pointer lock object forking for cross browser\r\n    let canvas = renderer.getContext().canvas as HTMLCanvasElement;\r\n\r\n    canvas.addEventListener(\"click\", function (this: HTMLCanvasElement, event: Event) {\r\n        this.requestPointerLock();\r\n    });\r\n\r\n    document.addEventListener('pointerlockchange', pointerLockChanged);\r\n\r\n    function pointerLockChanged(): void {\r\n        if (document.pointerLockElement === canvas) {\r\n            document.addEventListener(\"mousemove\", mouseMoved);\r\n        } else {\r\n            //console.log('The pointer lock status is now unlocked');\r\n            document.removeEventListener(\"mousemove\", mouseMoved);\r\n        }\r\n    }\r\n\r\n    function mouseMoved(event: MouseEvent) {\r\n        let rotation = new Vector3(\r\n            event.movementY,\r\n            event.movementX,\r\n            0\r\n        );\r\n        firsPersonCamera.Rotate(rotation);\r\n    }\r\n}\r\n\r\nfunction computeFramesPerSecond() {\r\n    frameCount++;\r\n    timeForFPS += deltaTime;\r\n    if (timeForFPS >= 1.0) {\r\n        console.log(frameCount);\r\n        timeForFPS -= 1.0;\r\n        frameCount = 0\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}